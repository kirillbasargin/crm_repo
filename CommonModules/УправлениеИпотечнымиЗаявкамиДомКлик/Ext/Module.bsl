
#Область МетодыAPI                         

Функция ВыполнитьАвторизацию(ПараметрыAPI, Ошибки = "", Тест = Ложь) Экспорт

	ТокенДоступа = "";
	
	Секреты = ПолучитьСекреты(ПараметрыAPI);
	ПараметрыПодключения = ПолучитьПараметрыПодключения(ПараметрыAPI, , , Истина);

	Boundary = "----" + СтрЗаменить(Строка(Новый УникальныйИдентификатор()), "-", ""); 
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Authorization", "Basic " + ПолучитьBase64ЗаголовокАвторизации(Секреты.client_id, Секреты.client_secret));
	ЗаголовокHTTP.Вставить("Content-Type", "multipart/form-data; boundary=" + Boundary);
	
	HTTPМетод = "POST";
	Сервер = ?(Тест, ПараметрыПодключения.ТестовыйСтенд_Token, ПараметрыПодключения.ПродуктивныйСтенд_Token);
	Прокси = ПараметрыПодключения.Прокси;
	АдресРесурса = "/token";	
	ТелоЗапроса = "--" + Boundary + "
	|Content-Disposition: form-data; name=""grant_type""
	|
	|client_credentials
	|--" + Boundary + "--";
	
 	ПараметрыЗапроса = ПолучитьПараметрыЗапроса(HTTPМетод, Сервер, АдресРесурса, ТелоЗапроса, Прокси);
	
	ОтветСервера = ВыполнитьHTTPЗапрос(ПараметрыЗапроса, ЗаголовокHTTP);		
	Если НЕ ОтветСервера = Неопределено Тогда
		Если ОтветСервера.Свойство("error") Тогда
			Ошибки = ОтветСервера.error;	
		Иначе	
			РегМен = РегистрыСведений.ДанныеАвторизацииДомКлик.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(РегМен, ОтветСервера);			
			РегМен.client_id = Секреты.client_id;
			РегМен.client_secret = Секреты.client_secret;
			РегМен.ГраницаДоступности = ТекущаяДата() + РегМен.expires_in - ПараметрыЗапроса.Таймаут;
			РегМен.Записать();
			
			ТокенДоступа = РегМен.access_token;
		КонецЕсли;
	Иначе
		Ошибки = Ошибки + Символы.ПС + "ВыполнитьАвторизацию: Не удалось получить результат запроса";
	КонецЕсли;
	
	Возврат ТокенДоступа;
	
КонецФункции

Функция БанкОфисы(ПараметрыAPI, Ошибки = "", Тест = Ложь) Экспорт

	Офисы = Новый Массив;
	ПараметрыПодключения = ПолучитьПараметрыПодключения(ПараметрыAPI, , , Истина);
	
	Ошибки = "";
	Секреты = ПолучитьСекреты(ПараметрыAPI);	
	access_token = ПолучитьТокенДоступа(Секреты.client_id, Секреты.client_secret);
	access_token = ?(ЗначениеЗаполнено(access_token), access_token, ВыполнитьАвторизацию(ПараметрыAPI, Ошибки, Тест));
	Если НЕ ЗначениеЗаполнено(access_token) Тогда
		Ошибки = Ошибки + Символы.ПС + "Не удалось выполнить авторизацию.";
		Возврат Офисы;
	КонецЕсли;
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Accept", "application/json");
	ЗаголовокHTTP.Вставить("Authorization", "Bearer " + access_token);
	
	HTTPМетод = "GET";
	Сервер = ?(Тест, ПараметрыПодключения.ТестовыйСтенд, ПараметрыПодключения.ПродуктивныйСтенд);
	Прокси = ПараметрыПодключения.Прокси;
	АдресРесурса = "/application/api/v2/bankoffices";
	ТелоЗапроса = "";
	
 	ПараметрыЗапроса = ПолучитьПараметрыЗапроса(HTTPМетод, Сервер, АдресРесурса, ТелоЗапроса, Прокси);
	
	ОтветСервера = ВыполнитьHTTPЗапрос(ПараметрыЗапроса, ЗаголовокHTTP);	
	Если НЕ ОтветСервера = Неопределено Тогда
		Если ТипЗнч(ОтветСервера) = Тип("Структура") И ОтветСервера.Свойство("code") Тогда
			Ошибки = "Ошибка при получении офисов банка." + "Код " + ОтветСервера.code + Символы.ПС;
			Если ОтветСервера.Свойство("internalMessage") Тогда
				Ошибки = Ошибки + ОтветСервера.internalMessage + Символы.ПС;
			КонецЕсли;
			Если ОтветСервера.Свойство("message") Тогда
				Ошибки = Ошибки + ОтветСервера.message + Символы.ПС;
			КонецЕсли;
			Если ОтветСервера.Свойство("requestId") Тогда
				Ошибки = Ошибки + ОтветСервера.requestId;
			КонецЕсли;	
		Иначе	
			Офисы = ОтветСервера;	
		КонецЕсли;
	Иначе
		Ошибки = Ошибки + Символы.ПС + "БанкОфисы: Не удалось получить результат запроса";			
	КонецЕсли;
	
	Возврат Офисы;
	
КонецФункции	

Функция Словарь(ПараметрыAPI, Ошибки = "", Тест = Ложь) Экспорт

	Данные = Новый Массив;
	ПараметрыПодключения = ПолучитьПараметрыПодключения(ПараметрыAPI, , , Истина);
	
	Ошибки = "";
	Секреты = ПолучитьСекреты(ПараметрыAPI);	
	access_token = ПолучитьТокенДоступа(Секреты.client_id, Секреты.client_secret);
	access_token = ?(ЗначениеЗаполнено(access_token), access_token, ВыполнитьАвторизацию(ПараметрыAPI, Ошибки, Тест));
	Если НЕ ЗначениеЗаполнено(access_token) Тогда
		Ошибки = Ошибки + Символы.ПС + "Не удалось выполнить авторизацию.";
		Возврат Данные;
	КонецЕсли;
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("'Accept", "application/json");
	ЗаголовокHTTP.Вставить("Authorization", "Bearer " + access_token);
	
	HTTPМетод = "GET";
	Сервер = ?(Тест, ПараметрыПодключения.ТестовыйСтенд, ПараметрыПодключения.ПродуктивныйСтенд);
	Прокси = ПараметрыПодключения.Прокси;
	АдресРесурса = "/application/api/v2/dictionaries";
	ТелоЗапроса = "";
	
 	ПараметрыЗапроса = ПолучитьПараметрыЗапроса(HTTPМетод, Сервер, АдресРесурса, ТелоЗапроса, Прокси);
	
	ОтветСервера = ВыполнитьHTTPЗапрос(ПараметрыЗапроса, ЗаголовокHTTP);	
	Если НЕ ОтветСервера = Неопределено Тогда
		Если ТипЗнч(ОтветСервера) = Тип("Структура") И ОтветСервера.Свойство("code") Тогда
			Ошибки = "Ошибка при получении словаря." + "Код " + ОтветСервера.code + Символы.ПС;
			Если ОтветСервера.Свойство("internalMessage") Тогда
				Ошибки = Ошибки + ОтветСервера.internalMessage + Символы.ПС;
			КонецЕсли;
			Если ОтветСервера.Свойство("message") Тогда
				Ошибки = Ошибки + ОтветСервера.message + Символы.ПС;
			КонецЕсли;
			Если ОтветСервера.Свойство("requestId") Тогда
				Ошибки = Ошибки + ОтветСервера.requestId;
			КонецЕсли;	
		Иначе	
			Данные = ОтветСервера;	
		КонецЕсли;
	Иначе
		Ошибки = Ошибки + Символы.ПС + "Словарь: Не удалось получить результат запроса";		
	КонецЕсли;
	
	Возврат Данные;
	
КонецФункции

Функция СозданиеСделки(ПараметрыAPI, ИпотечнаяЗаявка, Ошибки = "", Тест = Ложь) Экспорт
	
	ИдентификаторСделки = 0;
	ПараметрыПодключения = ПолучитьПараметрыПодключения(ПараметрыAPI, , , Истина);
	
	Ошибки = "";
	Секреты = ПолучитьСекреты(ПараметрыAPI);	
	access_token = ПолучитьТокенДоступа(Секреты.client_id, Секреты.client_secret);
	access_token = ?(ЗначениеЗаполнено(access_token), access_token, ВыполнитьАвторизацию(ПараметрыAPI, Ошибки, Тест));
	Если НЕ ЗначениеЗаполнено(access_token) Тогда
		Ошибки = Ошибки + Символы.ПС + "Не удалось выполнить авторизацию.";
		Возврат ИдентификаторСделки;
	КонецЕсли;
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Accept", "application/json");
	ЗаголовокHTTP.Вставить("Authorization", "Bearer " + access_token);
	ЗаголовокHTTP.Вставить("Content-Type", "application/json");
	
	HTTPМетод = "POST";
	Сервер = ?(Тест, ПараметрыПодключения.ТестовыйСтенд, ПараметрыПодключения.ПродуктивныйСтенд);
	Прокси = ПараметрыПодключения.Прокси;
	АдресРесурса = "/application/api/v2/deals";
	ТелоЗапроса = СоздатьСтруктуруСделкиДляОтправки(ИпотечнаяЗаявка);
	
 	ПараметрыЗапроса = ПолучитьПараметрыЗапроса(HTTPМетод, Сервер, АдресРесурса, ТелоЗапроса, Прокси);
	
	ОтветСервера = ВыполнитьHTTPЗапрос(ПараметрыЗапроса, ЗаголовокHTTP);	
	Если НЕ ОтветСервера = Неопределено Тогда
		Если ТипЗнч(ОтветСервера) = Тип("Структура") И ОтветСервера.Свойство("code") Тогда
			Ошибки = "Ошибка при создании сделки." + "Код " + ОтветСервера.code + Символы.ПС;
			Если ОтветСервера.Свойство("internalMessage") Тогда
				Ошибки = Ошибки + ОтветСервера.internalMessage + Символы.ПС;
			КонецЕсли;
			Если ОтветСервера.Свойство("message") Тогда
				Ошибки = Ошибки + ОтветСервера.message + Символы.ПС;
			КонецЕсли;
			Если ОтветСервера.Свойство("requestId") Тогда
				Ошибки = Ошибки + ОтветСервера.requestId;
			КонецЕсли;			
		Иначе	
			ИдентификаторСделки = ОтветСервера.id;				
		КонецЕсли;
	Иначе
		Ошибки = Ошибки + Символы.ПС + "СозданиеСделки: Не удалось получить результат запроса";		
	КонецЕсли;
	
	Возврат ИдентификаторСделки;	
	
КонецФункции

Функция ОбновлениеСделки(ПараметрыAPI, ИпотечнаяЗаявка, ID, Ошибки = "", Тест = Ложь) Экспорт
	
	ИдентификаторСделки = 0;
	ПараметрыПодключения = ПолучитьПараметрыПодключения(ПараметрыAPI, , , Истина);
	
	Ошибки = "";
	Секреты = ПолучитьСекреты(ПараметрыAPI);	
	access_token = ПолучитьТокенДоступа(Секреты.client_id, Секреты.client_secret);
	access_token = ?(ЗначениеЗаполнено(access_token), access_token, ВыполнитьАвторизацию(ПараметрыAPI, Ошибки, Тест));
	Если НЕ ЗначениеЗаполнено(access_token) Тогда
		Ошибки = Ошибки + Символы.ПС + "Не удалось выполнить авторизацию.";
		Возврат ИдентификаторСделки;
	КонецЕсли;
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Accept", "application/json");
	ЗаголовокHTTP.Вставить("Authorization", "Bearer " + access_token);
	ЗаголовокHTTP.Вставить("Content-Type", "application/json");
	
	HTTPМетод = "PUT";
	Сервер = ?(Тест, ПараметрыПодключения.ТестовыйСтенд, ПараметрыПодключения.ПродуктивныйСтенд);
	Прокси = ПараметрыПодключения.Прокси;
	АдресРесурса = "/application/api/v2/deals/" + СтрЗаменить(ID, Символы.НПП, "");	
	ТелоЗапроса = СоздатьСтруктуруСделкиДляОтправки(ИпотечнаяЗаявка);
	
 	ПараметрыЗапроса = ПолучитьПараметрыЗапроса(HTTPМетод, Сервер, АдресРесурса, ТелоЗапроса, Прокси);
	
	ОтветСервера = ВыполнитьHTTPЗапрос(ПараметрыЗапроса, ЗаголовокHTTP);	
	Если НЕ ОтветСервера = Неопределено Тогда
		Если ТипЗнч(ОтветСервера) = Тип("Структура") И ОтветСервера.Свойство("code") Тогда
			Ошибки = "Ошибка при обновлении сделки." + "Код " + ОтветСервера.code + Символы.ПС;
			Если ОтветСервера.Свойство("internalMessage") Тогда
				Ошибки = Ошибки + ОтветСервера.internalMessage + Символы.ПС;
			КонецЕсли;
			Если ОтветСервера.Свойство("message") Тогда
				Ошибки = Ошибки + ОтветСервера.message + Символы.ПС;
			КонецЕсли;
			Если ОтветСервера.Свойство("requestId") Тогда
				Ошибки = Ошибки + ОтветСервера.requestId;
			КонецЕсли;			
		Иначе	
			ИдентификаторСделки = ОтветСервера.id;				
		КонецЕсли;
	Иначе
		Ошибки = Ошибки + Символы.ПС + "ОбновлениеСделки: Не удалось получить результат запроса";		
	КонецЕсли;
	
	Возврат ИдентификаторСделки;	
	
КонецФункции

Функция ПолучитьДанныеСделки(ПараметрыAPI, ID_Заявки, Ошибки = "", Тест = Ложь) Экспорт
	
	ДанныеСделки = Неопределено;
	ПараметрыПодключения = ПолучитьПараметрыПодключения(ПараметрыAPI, , , Истина);
	
	Ошибки = "";
	Секреты = ПолучитьСекреты(ПараметрыAPI);	
	access_token = ПолучитьТокенДоступа(Секреты.client_id, Секреты.client_secret);
	access_token = ?(ЗначениеЗаполнено(access_token), access_token, ВыполнитьАвторизацию(ПараметрыAPI, Ошибки, Тест));
	Если НЕ ЗначениеЗаполнено(access_token) Тогда
		Ошибки = Ошибки + Символы.ПС + "Не удалось выполнить авторизацию.";
		Возврат ДанныеСделки;
	КонецЕсли;
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Accept", "application/json");
	ЗаголовокHTTP.Вставить("Authorization", "Bearer " + access_token);
	ЗаголовокHTTP.Вставить("Content-Type", "application/json");
	
	HTTPМетод = "GET";
	Сервер = ?(Тест, ПараметрыПодключения.ТестовыйСтенд, ПараметрыПодключения.ПродуктивныйСтенд);
	Прокси = ПараметрыПодключения.Прокси;
	АдресРесурса = "/application/api/v2/deals/" + СтрЗаменить(ID_Заявки, Символы.НПП, "");	
	ТелоЗапроса = "";
	
 	ПараметрыЗапроса = ПолучитьПараметрыЗапроса(HTTPМетод, Сервер, АдресРесурса, ТелоЗапроса, Прокси);
	
	ОтветСервера = ВыполнитьHTTPЗапрос(ПараметрыЗапроса, ЗаголовокHTTP);	
	Если НЕ ОтветСервера = Неопределено Тогда
		Если ТипЗнч(ОтветСервера) = Тип("Структура") И ОтветСервера.Свойство("code") Тогда
			Ошибки = "Ошибка при получении данных сделки." + "Код " + ОтветСервера.code + Символы.ПС;
			Если ОтветСервера.Свойство("internalMessage") Тогда
				Ошибки = Ошибки + ОтветСервера.internalMessage + Символы.ПС;
			КонецЕсли;
			Если ОтветСервера.Свойство("message") Тогда
				Ошибки = Ошибки + ОтветСервера.message + Символы.ПС;
			КонецЕсли;
			Если ОтветСервера.Свойство("requestId") Тогда
				Ошибки = Ошибки + ОтветСервера.requestId;
			КонецЕсли;			
		Иначе	
			ДанныеСделки = ОтветСервера; //ПреобразоватьСтруктуруВJSON(ОтветСервера);				
		КонецЕсли;
	Иначе
		Ошибки = Ошибки + Символы.ПС + "ОбновлениеСделки: Не удалось получить результат запроса";		
	КонецЕсли;
	
	Возврат ДанныеСделки;	
	
КонецФункции

Функция СозданиеАнкеты(ПараметрыAPI, ID_Заявки, Анкета, ТипАнкеты, Ошибки = "", Тест = Ложь) Экспорт
	
	СтруктураВозврата = Неопределено;
	ПараметрыПодключения = ПолучитьПараметрыПодключения(ПараметрыAPI, , , Истина);
	
	Ошибки = "";
	Секреты = ПолучитьСекреты(ПараметрыAPI);	
	access_token = ПолучитьТокенДоступа(Секреты.client_id, Секреты.client_secret);
	access_token = ?(ЗначениеЗаполнено(access_token), access_token, ВыполнитьАвторизацию(ПараметрыAPI, Ошибки, Тест));
	Если НЕ ЗначениеЗаполнено(access_token) Тогда
		Ошибки = Ошибки + Символы.ПС + "Не удалось выполнить авторизацию.";
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Accept", "application/json");
	ЗаголовокHTTP.Вставить("Authorization", "Bearer " + access_token);
	ЗаголовокHTTP.Вставить("Content-Type", "application/json");
	
	HTTPМетод = "POST";
	Сервер = ?(Тест, ПараметрыПодключения.ТестовыйСтенд, ПараметрыПодключения.ПродуктивныйСтенд);
	Прокси = ПараметрыПодключения.Прокси;
	АдресРесурса = "/application/api/v2/deals/" + СтрЗаменить(ID_Заявки, Символы.НПП, "") + "/applications";
	ТелоЗапроса = СоздатьСтруктуруАнкеты(ПараметрыAPI, Анкета, ТипАнкеты);
	
	ПараметрыЗапроса = ПолучитьПараметрыЗапроса(HTTPМетод, Сервер, АдресРесурса, ТелоЗапроса, Прокси);
	
	ОтветСервера = ВыполнитьHTTPЗапрос(ПараметрыЗапроса, ЗаголовокHTTP);	
	Если НЕ ОтветСервера = Неопределено Тогда
		Если ТипЗнч(ОтветСервера) = Тип("Структура") И ОтветСервера.Свойство("code") Тогда
			Ошибки = "Ошибка при создании анкеты." + "Код " + ОтветСервера.code + Символы.ПС;
			Если ОтветСервера.Свойство("internalMessage") Тогда
				Ошибки = Ошибки + ОтветСервера.internalMessage + Символы.ПС;
			КонецЕсли;
			Если ОтветСервера.Свойство("message") Тогда
				Ошибки = Ошибки + ОтветСервера.message + Символы.ПС;
			КонецЕсли;
			Если ОтветСервера.Свойство("requestId") Тогда
				Ошибки = Ошибки + ОтветСервера.requestId;
			КонецЕсли;			
		Иначе	
			acceptance = ОтветСервера.acceptance;
		
			СтруктураВозврата = Новый Структура("ApplicationID, Статус, ДатаПоследнегоИзменения, ДатаПодтверждения, ТипАнкеты, Отправлять");
			СтруктураВозврата.ApplicationID = acceptance.applicationId;
			СтруктураВозврата.Статус = ПолучитьСтатусИпотечнойАнкеты(acceptance.status);
			СтруктураВозврата.ДатаПоследнегоИзменения = ПреобразоватьКДате(acceptance.lastRequestMoment);
			СтруктураВозврата.ДатаПодтверждения = ПреобразоватьКДате(acceptance.signMoment);
			СтруктураВозврата.ТипАнкеты = ТипАнкеты;
			СтруктураВозврата.Отправлять = Ложь;
		КонецЕсли;
	Иначе
		Ошибки = Ошибки + Символы.ПС + "СозданиеАнкеты: Не удалось получить результат запроса";		
	КонецЕсли;
	
	Возврат СтруктураВозврата;	
	
КонецФункции

Функция ОбновлениеАнкеты(ПараметрыAPI, ID_Заявки, ID_Анкеты, Анкета, ТипАнкеты, Ошибки = "", Тест = Ложь) Экспорт
	
	СтруктураВозврата = Неопределено;
	ПараметрыПодключения = ПолучитьПараметрыПодключения(ПараметрыAPI, , , Истина);
	
	Ошибки = "";
	Секреты = ПолучитьСекреты(ПараметрыAPI);	
	access_token = ПолучитьТокенДоступа(Секреты.client_id, Секреты.client_secret);
	access_token = ?(ЗначениеЗаполнено(access_token), access_token, ВыполнитьАвторизацию(ПараметрыAPI, Ошибки, Тест));
	Если НЕ ЗначениеЗаполнено(access_token) Тогда
		Ошибки = Ошибки + Символы.ПС + "Не удалось выполнить авторизацию.";
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Accept", "application/json");
	ЗаголовокHTTP.Вставить("Authorization", "Bearer " + access_token);
	ЗаголовокHTTP.Вставить("Content-Type", "application/json");
	
	HTTPМетод = "PUT";
	Сервер = ?(Тест, ПараметрыПодключения.ТестовыйСтенд, ПараметрыПодключения.ПродуктивныйСтенд);
	Прокси = ПараметрыПодключения.Прокси;
	АдресРесурса = "/application/api/v2/deals/" + СтрЗаменить(ID_Заявки, Символы.НПП, "") + "/applications/" + СтрЗаменить(ID_Анкеты, Символы.НПП, "");	
	ТелоЗапроса = СоздатьСтруктуруАнкеты(ПараметрыAPI, Анкета, ТипАнкеты);
	
	ПараметрыЗапроса = ПолучитьПараметрыЗапроса(HTTPМетод, Сервер, АдресРесурса, ТелоЗапроса, Прокси);
	
	ОтветСервера = ВыполнитьHTTPЗапрос(ПараметрыЗапроса, ЗаголовокHTTP);	
	Если НЕ ОтветСервера = Неопределено Тогда
		Если ТипЗнч(ОтветСервера) = Тип("Структура") И ОтветСервера.Свойство("code") Тогда
			Ошибки = "Ошибка при обновлении анкеты." + "Код " + ОтветСервера.code + Символы.ПС;
			Если ОтветСервера.Свойство("internalMessage") Тогда
				Ошибки = Ошибки + ОтветСервера.internalMessage + Символы.ПС;
			КонецЕсли;
			Если ОтветСервера.Свойство("message") Тогда
				Ошибки = Ошибки + ОтветСервера.message + Символы.ПС;
			КонецЕсли;
			Если ОтветСервера.Свойство("requestId") Тогда
				Ошибки = Ошибки + ОтветСервера.requestId;
			КонецЕсли;			
		Иначе	
			acceptance = ОтветСервера.acceptance;
		
			СтруктураВозврата = Новый Структура("ApplicationID, Статус, ДатаПоследнегоИзменения, ДатаПодтверждения, ТипАнкеты");
			СтруктураВозврата.ApplicationID = acceptance.applicationId;
			СтруктураВозврата.Статус = ПолучитьСтатусИпотечнойАнкеты(acceptance.status);
			СтруктураВозврата.ДатаПоследнегоИзменения = ПреобразоватьКДате(acceptance.lastRequestMoment);
			СтруктураВозврата.ДатаПодтверждения = ПреобразоватьКДате(acceptance.signMoment);
			СтруктураВозврата.ТипАнкеты = ТипАнкеты;		
		КонецЕсли;
	Иначе
		Ошибки = Ошибки + Символы.ПС + "ОбновлениеАнкеты: Не удалось получить результат запроса";		
	КонецЕсли;
	
	Возврат СтруктураВозврата;	
	
КонецФункции

Функция ПолучитьДанныеАнкеты(ПараметрыAPI, ID_Заявки, ID_Анкеты, Ошибки = "", Тест = Ложь) Экспорт
	
	ДанныеАнкеты = Неопределено;
	ПараметрыПодключения = ПолучитьПараметрыПодключения(ПараметрыAPI, , , Истина);
	
	Ошибки = "";
	Секреты = ПолучитьСекреты(ПараметрыAPI);	
	access_token = ПолучитьТокенДоступа(Секреты.client_id, Секреты.client_secret);
	access_token = ?(ЗначениеЗаполнено(access_token), access_token, ВыполнитьАвторизацию(ПараметрыAPI, Ошибки, Тест));
	Если НЕ ЗначениеЗаполнено(access_token) Тогда
		Ошибки = Ошибки + Символы.ПС + "Не удалось выполнить авторизацию.";
		Возврат ДанныеАнкеты;
	КонецЕсли;
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Accept", "application/json");
	ЗаголовокHTTP.Вставить("Authorization", "Bearer " + access_token);
	ЗаголовокHTTP.Вставить("Content-Type", "application/json");
	
	HTTPМетод = "GET";
	Сервер = ?(Тест, ПараметрыПодключения.ТестовыйСтенд, ПараметрыПодключения.ПродуктивныйСтенд);
	Прокси = ПараметрыПодключения.Прокси;
	АдресРесурса = "/application/api/v2/deals/" + СтрЗаменить(ID_Заявки, Символы.НПП, "") + "/applications/" + СтрЗаменить(ID_Анкеты, Символы.НПП, "");	
	ТелоЗапроса = "";
	
 	ПараметрыЗапроса = ПолучитьПараметрыЗапроса(HTTPМетод, Сервер, АдресРесурса, ТелоЗапроса, Прокси);
	
	ОтветСервера = ВыполнитьHTTPЗапрос(ПараметрыЗапроса, ЗаголовокHTTP);	
	Если НЕ ОтветСервера = Неопределено Тогда
		Если ТипЗнч(ОтветСервера) = Тип("Структура") И ОтветСервера.Свойство("code") Тогда
			Ошибки = "Ошибка при получении данных анкеты." + "Код " + ОтветСервера.code + Символы.ПС;
			Если ОтветСервера.Свойство("internalMessage") Тогда
				Ошибки = Ошибки + ОтветСервера.internalMessage + Символы.ПС;
			КонецЕсли;
			Если ОтветСервера.Свойство("message") Тогда
				Ошибки = Ошибки + ОтветСервера.message + Символы.ПС;
			КонецЕсли;
			Если ОтветСервера.Свойство("requestId") Тогда
				Ошибки = Ошибки + ОтветСервера.requestId;
			КонецЕсли;			
		Иначе	
			ДанныеАнкеты = ПреобразоватьСтруктуруВJSON(ОтветСервера);				
		КонецЕсли;
	Иначе
		Ошибки = Ошибки + Символы.ПС + "ОбновлениеСделки: Не удалось получить результат запроса";		
	КонецЕсли;
	
	Возврат ДанныеАнкеты;	
	
КонецФункции

Функция УдалениеАнкетыСозаемщика(ПараметрыAPI, ID_Заявки, ID_Анкеты, Ошибки = "", Тест = Ложь) Экспорт
	
	КодСостояния = Неопределено;
	ПараметрыПодключения = ПолучитьПараметрыПодключения(ПараметрыAPI, , , Истина);
	
	Ошибки = "";
	Секреты = ПолучитьСекреты(ПараметрыAPI);	
	access_token = ПолучитьТокенДоступа(Секреты.client_id, Секреты.client_secret);
	access_token = ?(ЗначениеЗаполнено(access_token), access_token, ВыполнитьАвторизацию(ПараметрыAPI, Ошибки, Тест));
	Если НЕ ЗначениеЗаполнено(access_token) Тогда
		Ошибки = Ошибки + Символы.ПС + "Не удалось выполнить авторизацию.";
		Возврат КодСостояния;
	КонецЕсли;
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Accept", "application/json");
	ЗаголовокHTTP.Вставить("Authorization", "Bearer " + access_token);
	ЗаголовокHTTP.Вставить("Content-Type", "application/json");
		
	HTTPМетод = "DELETE";
	Сервер = ?(Тест, ПараметрыПодключения.ТестовыйСтенд, ПараметрыПодключения.ПродуктивныйСтенд);
	Прокси = ПараметрыПодключения.Прокси;
	АдресРесурса = "/application/api/v2/deals/" + СтрЗаменить(ID_Заявки, Символы.НПП, "") + "/applications/" + СтрЗаменить(ID_Анкеты, Символы.НПП, "");	
	ТелоЗапроса = ""; 
	
	ПараметрыЗапроса = ПолучитьПараметрыЗапроса(HTTPМетод, Сервер, АдресРесурса, ТелоЗапроса, Прокси);
	
	ОтветСервера = ВыполнитьHTTPЗапрос(ПараметрыЗапроса, ЗаголовокHTTP, Истина);	
	Если НЕ ОтветСервера = Неопределено Тогда
		КодСостояния = ОтветСервера;
	Иначе
		Ошибки = Ошибки + Символы.ПС + "УдалениеАнкетыСозаемщика: Не удалось получить результат запроса";		
	КонецЕсли;
	
	Возврат КодСостояния;	
	
КонецФункции

Функция СозданиеДокументов(ПараметрыAPI, ID_Анкеты, Документ, ТипДокумента, ПодтипДокумента = Неопределено, Ошибки = "", Тест = Ложь) Экспорт
	
	СтруктураВозврата = Неопределено;
	ПараметрыПодключения = ПолучитьПараметрыПодключения(ПараметрыAPI, , , Истина);
	
	Ошибки = "";
	Секреты = ПолучитьСекреты(ПараметрыAPI);	
	access_token = ПолучитьТокенДоступа(Секреты.client_id, Секреты.client_secret);
	access_token = ?(ЗначениеЗаполнено(access_token), access_token, ВыполнитьАвторизацию(ПараметрыAPI, Ошибки, Тест));
	Если НЕ ЗначениеЗаполнено(access_token) Тогда
		Ошибки = Ошибки + Символы.ПС + "Не удалось выполнить авторизацию.";
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	ID_Тип = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТипДокумента, "ID");
	Если ЗначениеЗаполнено(ПодтипДокумента) Тогда
		ID_Подтип = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПодтипДокумента, "ID");
	КонецЕсли;
	
	Boundary = "----" + СтрЗаменить(Строка(Новый УникальныйИдентификатор()), "-", "");
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Accept", "application/json");
	ЗаголовокHTTP.Вставить("Authorization", "Bearer " + access_token);
	ЗаголовокHTTP.Вставить("Content-Type", "multipart/form-data; boundary=" + Boundary);
	
	HTTPМетод = "POST";
	Сервер = ?(Тест, ПараметрыПодключения.ТестовыйСтенд, ПараметрыПодключения.ПродуктивныйСтенд);
	Прокси = ПараметрыПодключения.Прокси;
	АдресРесурса = "/application/api/v2/applications/" + СтрЗаменить(ID_Анкеты, Символы.НПП, "") + "/documents";	
	ТелоЗапроса = Неопределено;
	
	ФайлЗапроса = Неопределено;
	ДвоичныеДанные = Неопределено;
		
	//ФайлЗапроса = ПоместитьФайлВТелоЗапроса(Документ, Boundary, СтрЗаменить(ID_Тип, Символы.НПП, ""), СтрЗаменить(ID_Подтип, Символы.НПП, ""), Ошибки);
	ДвоичныеДанные = ПоместитьБинарныеДанныеВТелоЗапроса(Документ, Boundary, СтрЗаменить(ID_Тип, Символы.НПП, ""), СтрЗаменить(ID_Подтип, Символы.НПП, ""), Ошибки);	
	
	////тест
	//ПапкаВременныхФайлов = КаталогВременныхФайлов();
	//ФайлЗапроса = ПапкаВременныхФайлов + Boundary + ".txt";
	//ДвоичныеДанные.Записать(ФайлЗапроса);
	
	ПараметрыЗапроса = ПолучитьПараметрыЗапроса(HTTPМетод, Сервер, АдресРесурса, ТелоЗапроса, Прокси, , , , ФайлЗапроса, ДвоичныеДанные);
	
	ОтветСервера = ВыполнитьHTTPЗапрос(ПараметрыЗапроса, ЗаголовокHTTP);	
	Если НЕ ОтветСервера = Неопределено Тогда
		Если ТипЗнч(ОтветСервера) = Тип("Структура") И ОтветСервера.Свойство("code") Тогда
			Ошибки = "Ошибка при создании документов." + "Код " + ОтветСервера.code + Символы.ПС;
			Если ОтветСервера.Свойство("internalMessage") Тогда
				Ошибки = Ошибки + ОтветСервера.internalMessage + Символы.ПС;
			КонецЕсли;
			Если ОтветСервера.Свойство("message") Тогда
				Ошибки = Ошибки + ОтветСервера.message + Символы.ПС;
			КонецЕсли;
			Если ОтветСервера.Свойство("requestId") Тогда
				Ошибки = Ошибки + ОтветСервера.requestId;
			КонецЕсли;			
		Иначе							
			СтруктураВозврата = Новый Структура("id, path, create_date, name, ПодтипДокумента, СтатусДокумента");
			СтруктураВозврата.id = ОтветСервера.id;
			СтруктураВозврата.path = ОтветСервера.path;
			СтруктураВозврата.create_date = ПреобразоватьКДате(ОтветСервера.createdTime);
			СтруктураВозврата.name = ОтветСервера.filename;
			СтруктураВозврата.ПодтипДокумента = Справочники.ПодтипыДокументовДомКлик.НайтиПоРеквизиту("ID", ОтветСервера.documentSubtypeId);
			СтруктураВозврата.СтатусДокумента = Справочники.СтатусыИпотечныхДокументов.НайтиПоНаименованию(ОтветСервера.classificationStatus);
		КонецЕсли;
	Иначе
		Ошибки = Ошибки + Символы.ПС + "СозданиеДокументов: Не удалось получить результат запроса";		
	КонецЕсли;
			
	Если НЕ ФайлЗапроса = Неопределено Тогда
		Файл = Новый Файл(ФайлЗапроса);
		Если Файл.Существует() Тогда
			Попытка
				УдалитьФайлы(ФайлЗапроса);  
			Исключение
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли; 
	КонецЕсли; 		
	
	Возврат СтруктураВозврата;	
	
КонецФункции

Функция УдалениеДокументов(ПараметрыAPI, ID_Анкеты, ID_Документа, Ошибки = "", Тест = Ложь) Экспорт
	
	КодСостояния = Неопределено;
	ПараметрыПодключения = ПолучитьПараметрыПодключения(ПараметрыAPI, , , Истина);
	
	Ошибки = "";
	Секреты = ПолучитьСекреты(ПараметрыAPI);	
	access_token = ПолучитьТокенДоступа(Секреты.client_id, Секреты.client_secret);
	access_token = ?(ЗначениеЗаполнено(access_token), access_token, ВыполнитьАвторизацию(ПараметрыAPI, Ошибки, Тест));
	Если НЕ ЗначениеЗаполнено(access_token) Тогда
		Ошибки = Ошибки + Символы.ПС + "Не удалось выполнить авторизацию.";
		Возврат КодСостояния;
	КонецЕсли;
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Accept", "application/json");
	ЗаголовокHTTP.Вставить("Authorization", "Bearer " + access_token);
	ЗаголовокHTTP.Вставить("Content-Type", "application/json");
	
	HTTPМетод = "DELETE";
	Сервер = ?(Тест, ПараметрыПодключения.ТестовыйСтенд, ПараметрыПодключения.ПродуктивныйСтенд);
	Прокси = ПараметрыПодключения.Прокси;
	АдресРесурса = "/application/api/v2/applications/" + СтрЗаменить(ID_Анкеты, Символы.НПП, "") + "/documents/" + СтрЗаменить(ID_Документа, Символы.НПП, "");	
	ТелоЗапроса = "";
		
	ПараметрыЗапроса = ПолучитьПараметрыЗапроса(HTTPМетод, Сервер, АдресРесурса, ТелоЗапроса, Прокси);
	
	ОтветСервера = ВыполнитьHTTPЗапрос(ПараметрыЗапроса, ЗаголовокHTTP, Истина);	
	Если НЕ ОтветСервера = Неопределено Тогда
		КодСостояния = ОтветСервера;	
	Иначе
		Ошибки = Ошибки + Символы.ПС + "УдалениеДокументов: Не удалось получить результат запроса";		
	КонецЕсли;
				
	Возврат КодСостояния;	
	
КонецФункции

Функция ОбновитьДокумент(ПараметрыAPI, ID_Анкеты, ID_Документа, ТипДокумента, ПодтипДокумента = Неопределено, Ошибки = "", Тест = Ложь) Экспорт
	
	СтруктураВозврата = Неопределено;
	ПараметрыПодключения = ПолучитьПараметрыПодключения(ПараметрыAPI, , , Истина);
	
	Ошибки = "";
	Секреты = ПолучитьСекреты(ПараметрыAPI);	
	access_token = ПолучитьТокенДоступа(Секреты.client_id, Секреты.client_secret);
	access_token = ?(ЗначениеЗаполнено(access_token), access_token, ВыполнитьАвторизацию(ПараметрыAPI, Ошибки, Тест));
	Если НЕ ЗначениеЗаполнено(access_token) Тогда
		Ошибки = Ошибки + Символы.ПС + "Не удалось выполнить авторизацию.";
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Accept", "application/json");
	ЗаголовокHTTP.Вставить("Authorization", "Bearer " + access_token);
	ЗаголовокHTTP.Вставить("Content-Type", "application/json");
	
	HTTPМетод = "PUT";
	Сервер = ?(Тест, ПараметрыПодключения.ТестовыйСтенд, ПараметрыПодключения.ПродуктивныйСтенд);
	Прокси = ПараметрыПодключения.Прокси;
	АдресРесурса = "/application/api/v2/deals/applications/" + СтрЗаменить(ID_Анкеты, Символы.НПП, "") + "/documents/" + СтрЗаменить(ID_Документа, Символы.НПП, "");	
	ТелоЗапроса = Новый Структура();
	ТелоЗапроса.Вставить("documentTypeId", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТипДокумента, "ID"));
	Если ЗначениеЗаполнено(ПодтипДокумента) Тогда
		ТелоЗапроса.Вставить("documentSubtypeId", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПодтипДокумента, "ID"));	
	КонецЕсли;	
		
	ПараметрыЗапроса = ПолучитьПараметрыЗапроса(HTTPМетод, Сервер, АдресРесурса, ТелоЗапроса, Прокси);
	
	ОтветСервера = ВыполнитьHTTPЗапрос(ПараметрыЗапроса, ЗаголовокHTTP);	
	Если НЕ ОтветСервера = Неопределено Тогда
		Если ТипЗнч(ОтветСервера) = Тип("Структура") И ОтветСервера.Свойство("code") Тогда
			Ошибки = "Ошибка при обновлении анкеты." + "Код " + ОтветСервера.code + Символы.ПС;
			Если ОтветСервера.Свойство("internalMessage") Тогда
				Ошибки = Ошибки + ОтветСервера.internalMessage + Символы.ПС;
			КонецЕсли;
			Если ОтветСервера.Свойство("message") Тогда
				Ошибки = Ошибки + ОтветСервера.message + Символы.ПС;
			КонецЕсли;
			Если ОтветСервера.Свойство("requestId") Тогда
				Ошибки = Ошибки + ОтветСервера.requestId;
			КонецЕсли;			
		Иначе	
			СтруктураВозврата = Новый Структура("id, path, create_date, name, ПодтипДокумента, СтатусДокумента");
			СтруктураВозврата.id = ОтветСервера.id;
			СтруктураВозврата.path = ОтветСервера.path;
			СтруктураВозврата.create_date = ПреобразоватьКДате(ОтветСервера.createdTime);
			СтруктураВозврата.name = ОтветСервера.filename;
			СтруктураВозврата.ПодтипДокумента = Справочники.ПодтипыДокументовДомКлик.НайтиПоРеквизиту("ID", ОтветСервера.documentSubtypeId); //documentTypeId
			СтруктураВозврата.СтатусДокумента = Справочники.СтатусыИпотечныхДокументов.НайтиПоНаименованию(ОтветСервера.classificationStatus);		
		КонецЕсли;
	Иначе
		Ошибки = Ошибки + Символы.ПС + "ОбновитьДокумент: Не удалось получить результат запроса";		
	КонецЕсли;
	
	Возврат СтруктураВозврата;	
	
КонецФункции

Функция ОтправитьПереотправитьСМСКлиенту(ПараметрыAPI, ID_Заявки, ID_Анкеты, Ошибки = "", Тест = Ложь) Экспорт
	
	СтруктураВозврата = Неопределено;
	ПараметрыПодключения = ПолучитьПараметрыПодключения(ПараметрыAPI, , , Истина);
	
	Ошибки = "";
	Секреты = ПолучитьСекреты(ПараметрыAPI);	
	access_token = ПолучитьТокенДоступа(Секреты.client_id, Секреты.client_secret);
	access_token = ?(ЗначениеЗаполнено(access_token), access_token, ВыполнитьАвторизацию(ПараметрыAPI, Ошибки, Тест));
	Если НЕ ЗначениеЗаполнено(access_token) Тогда
		Ошибки = Ошибки + Символы.ПС + "Не удалось выполнить авторизацию.";
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Accept", "application/json");
	ЗаголовокHTTP.Вставить("Authorization", "Bearer " + access_token);
	ЗаголовокHTTP.Вставить("Content-Type", "application/json");
	
	HTTPМетод = "POST";
	Сервер = ?(Тест, ПараметрыПодключения.ТестовыйСтенд, ПараметрыПодключения.ПродуктивныйСтенд);
	Прокси = ПараметрыПодключения.Прокси;
	АдресРесурса = "/application/api/v2/deals/" + СтрЗаменить(ID_Заявки, Символы.НПП, "") + "/applications/" + СтрЗаменить(ID_Анкеты, Символы.НПП, "")  + "/acceptance";	
	ТелоЗапроса = "";
	
 	ПараметрыЗапроса = ПолучитьПараметрыЗапроса(HTTPМетод, Сервер, АдресРесурса, ТелоЗапроса, Прокси);
	
	ОтветСервера = ВыполнитьHTTPЗапрос(ПараметрыЗапроса, ЗаголовокHTTP);	
	Если НЕ ОтветСервера = Неопределено Тогда
		Если ТипЗнч(ОтветСервера) = Тип("Структура") И ОтветСервера.Свойство("code") Тогда
			Ошибки = "Ошибка при отправке СМС клиенту." + "Код " + ОтветСервера.code + Символы.ПС;
			Если ОтветСервера.Свойство("internalMessage") Тогда
				Ошибки = Ошибки + ОтветСервера.internalMessage + Символы.ПС;
			КонецЕсли;
			Если ОтветСервера.Свойство("message") Тогда
				Ошибки = Ошибки + ОтветСервера.message + Символы.ПС;
			КонецЕсли;
			Если ОтветСервера.Свойство("requestId") Тогда
				Ошибки = Ошибки + ОтветСервера.requestId;
			КонецЕсли;			
		Иначе				
			СтруктураВозврата = Новый Структура("ApplicationID, Статус, ДатаПоследнегоИзменения, ДатаПодтверждения, ТипАнкеты");
			СтруктураВозврата.ApplicationID = ОтветСервера.applicationId;
			СтруктураВозврата.Статус = ПолучитьСтатусИпотечнойАнкеты(ОтветСервера.status);
			СтруктураВозврата.ДатаПоследнегоИзменения = ПреобразоватьКДате(ОтветСервера.lastRequestMoment);
			СтруктураВозврата.ДатаПодтверждения = ПреобразоватьКДате(ОтветСервера.signMoment);
		КонецЕсли;
	Иначе
		Ошибки = Ошибки + Символы.ПС + "ОтправитьПереотправитьСМСКлиенту: Не удалось получить результат запроса";		
	КонецЕсли;
	
	Возврат СтруктураВозврата;	
	
КонецФункции

Функция ПодписатьСогласиеКодомИзСМС(ПараметрыAPI, ID_Заявки, ID_Анкеты, Код, Ошибки = "", Тест = Ложь) Экспорт
	
	СтруктураВозврата = Неопределено;
	ПараметрыПодключения = ПолучитьПараметрыПодключения(ПараметрыAPI, , , Истина);
	
	Ошибки = "";
	Секреты = ПолучитьСекреты(ПараметрыAPI);	
	access_token = ПолучитьТокенДоступа(Секреты.client_id, Секреты.client_secret);
	access_token = ?(ЗначениеЗаполнено(access_token), access_token, ВыполнитьАвторизацию(ПараметрыAPI, Ошибки, Тест));
	Если НЕ ЗначениеЗаполнено(access_token) Тогда
		Ошибки = Ошибки + Символы.ПС + "Не удалось выполнить авторизацию.";
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Accept", "application/json");
	ЗаголовокHTTP.Вставить("Authorization", "Bearer " + access_token);
	ЗаголовокHTTP.Вставить("Content-Type", "application/json");
	
	HTTPМетод = "PUT";
	Сервер = ?(Тест, ПараметрыПодключения.ТестовыйСтенд, ПараметрыПодключения.ПродуктивныйСтенд);
	Прокси = ПараметрыПодключения.Прокси;
	АдресРесурса = "/application/api/v2/deals/" + СтрЗаменить(ID_Заявки, Символы.НПП, "") + "/applications/" + СтрЗаменить(ID_Анкеты, Символы.НПП, "")  + "/acceptance";	
	ТелоЗапроса = Новый Структура("code", Код);
	
 	ПараметрыЗапроса = ПолучитьПараметрыЗапроса(HTTPМетод, Сервер, АдресРесурса, ТелоЗапроса, Прокси);
	
	ОтветСервера = ВыполнитьHTTPЗапрос(ПараметрыЗапроса, ЗаголовокHTTP);	
	Если НЕ ОтветСервера = Неопределено Тогда
		Если ТипЗнч(ОтветСервера) = Тип("Структура") И ОтветСервера.Свойство("code") Тогда
			Ошибки = "Ошибка при подписании согласия." + "Код " + ОтветСервера.code + Символы.ПС;
			Если ОтветСервера.Свойство("internalMessage") Тогда
				Ошибки = Ошибки + ОтветСервера.internalMessage + Символы.ПС;
			КонецЕсли;
			Если ОтветСервера.Свойство("message") Тогда
				Ошибки = Ошибки + ОтветСервера.message + Символы.ПС;
			КонецЕсли;
			Если ОтветСервера.Свойство("requestId") Тогда
				Ошибки = Ошибки + ОтветСервера.requestId;
			КонецЕсли;			
		Иначе		
			СтруктураВозврата = Новый Структура("ApplicationID, Статус, ДатаПоследнегоИзменения, ДатаПодтверждения, ТипАнкеты");
			СтруктураВозврата.ApplicationID = ОтветСервера.applicationId;
			СтруктураВозврата.Статус = ПолучитьСтатусИпотечнойАнкеты(ОтветСервера.status);
			СтруктураВозврата.ДатаПоследнегоИзменения = ПреобразоватьКДате(ОтветСервера.lastRequestMoment);
			СтруктураВозврата.ДатаПодтверждения = ПреобразоватьКДате(ОтветСервера.signMoment);
		КонецЕсли;
	Иначе
		Ошибки = Ошибки + Символы.ПС + "ПодписатьСогласиеКодомИзСМС: Не удалось получить результат запроса";		
	КонецЕсли;
	
	Возврат СтруктураВозврата;	
	
КонецФункции

Функция События(ПараметрыAPI, ID_Заявки, Статус, Ошибки = "", Тест = Ложь) Экспорт
	
	КодСостояния = Неопределено;
	ПараметрыПодключения = ПолучитьПараметрыПодключения(ПараметрыAPI, , , Истина);
	
	Ошибки = "";
	Секреты = ПолучитьСекреты(ПараметрыAPI);	
	access_token = ПолучитьТокенДоступа(Секреты.client_id, Секреты.client_secret);
	access_token = ?(ЗначениеЗаполнено(access_token), access_token, ВыполнитьАвторизацию(ПараметрыAPI, Ошибки, Тест));
	Если НЕ ЗначениеЗаполнено(access_token) Тогда
		Ошибки = Ошибки + Символы.ПС + "Не удалось выполнить авторизацию.";
		Возврат КодСостояния;
	КонецЕсли;
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Accept", "application/json");
	ЗаголовокHTTP.Вставить("Authorization", "Bearer " + access_token);
	ЗаголовокHTTP.Вставить("Content-Type", "application/json");
	
	HTTPМетод = "POST";
	Сервер = ?(Тест, ПараметрыПодключения.ТестовыйСтенд, ПараметрыПодключения.ПродуктивныйСтенд);
	Прокси = ПараметрыПодключения.Прокси;
	АдресРесурса = "/application/api/v2/deals/" + СтрЗаменить(ID_Заявки, Символы.НПП, "") + "/events";	
	ТелоЗапроса = Новый Структура("type", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Статус, "Title")); // "type": SENT_TO_BANK или "type": "SEND_DEAL_TO_BANK"
	
 	ПараметрыЗапроса = ПолучитьПараметрыЗапроса(HTTPМетод, Сервер, АдресРесурса, ТелоЗапроса, Прокси);
	
	ОтветСервера = ВыполнитьHTTPЗапрос(ПараметрыЗапроса, ЗаголовокHTTP, Истина);	
	Если НЕ ОтветСервера = Неопределено Тогда	
		КодСостояния = ОтветСервера;	
	Иначе
		Ошибки = Ошибки + Символы.ПС + "ПодписатьСогласиеКодомИзСМС: Не удалось получить результат запроса";		
	КонецЕсли;
	
	Возврат КодСостояния;	
	
КонецФункции

Функция ОтправитьСделку(ПараметрыAPI, ID_Заявки, Ошибки = "", Тест = Ложь) Экспорт
	
	КодСостояния = Неопределено;
	ПараметрыПодключения = ПолучитьПараметрыПодключения(ПараметрыAPI, , , Истина);
	
	Ошибки = "";
	Секреты = ПолучитьСекреты(ПараметрыAPI);	
	access_token = ПолучитьТокенДоступа(Секреты.client_id, Секреты.client_secret);
	access_token = ?(ЗначениеЗаполнено(access_token), access_token, ВыполнитьАвторизацию(ПараметрыAPI, Ошибки, Тест));
	Если НЕ ЗначениеЗаполнено(access_token) Тогда
		Ошибки = Ошибки + Символы.ПС + "Не удалось выполнить авторизацию.";
		Возврат КодСостояния;
	КонецЕсли;
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Accept", "application/json");
	ЗаголовокHTTP.Вставить("Authorization", "Bearer " + access_token);
	ЗаголовокHTTP.Вставить("Content-Type", "application/json");
	
	HTTPМетод = "POST";
	Сервер = ?(Тест, ПараметрыПодключения.ТестовыйСтенд, ПараметрыПодключения.ПродуктивныйСтенд);
	Прокси = ПараметрыПодключения.Прокси;
	АдресРесурса = "/application/api/v2/deals/" + СтрЗаменить(ID_Заявки, Символы.НПП, "") + "/events";	
	ТелоЗапроса = Новый Структура("type", "SEND_DEAL_TO_BANK"); //??
	
 	ПараметрыЗапроса = ПолучитьПараметрыЗапроса(HTTPМетод, Сервер, АдресРесурса, ТелоЗапроса, Прокси);
	
	ОтветСервера = ВыполнитьHTTPЗапрос(ПараметрыЗапроса, ЗаголовокHTTP, Истина);	
	Если НЕ ОтветСервера = Неопределено Тогда	
		КодСостояния = ОтветСервера;	
	Иначе
		Ошибки = Ошибки + Символы.ПС + "ПодписатьСогласиеКодомИзСМС: Не удалось получить результат запроса";		
	КонецЕсли;
	
	Возврат КодСостояния;	
	
КонецФункции

#КонецОбласти

#Область Интерфейс

Функция ПолучитьСтатусЗаявкиПоID(ID) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтатусыИпотечныхЗаявок.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СтатусыИпотечныхЗаявок КАК СтатусыИпотечныхЗаявок
	|ГДЕ
	|	СтатусыИпотечныхЗаявок.ID = &ID";
	
	Запрос.УстановитьПараметр("ID", ID);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();	
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
        	Возврат ВыборкаДетальныеЗаписи.Ссылка;
		КонецЕсли;
	КонецЕсли;
		
КонецФункции	

Функция ПолучитьПараметрыПодключения(ПараметрыAPI, Ответственный = Неопределено, ВыводитьПараметры = Ложь, ДляАвторизации = Ложь) Экспорт
	
	Запрос = Новый Запрос;	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ПараметрыПодключенияAPI.Ссылка.username КАК username_common,
	|	ПараметрыПодключенияAPI.Ссылка.password КАК password_common,
	|	ПараметрыПодключенияAPI.Ссылка.АдресДляРассылки КАК АдресДляРассылки_common,
	|	ПараметрыПодключенияAPI.Ссылка.ПродуктивныйСтенд КАК ПродуктивныйСтенд,
	|	ПараметрыПодключенияAPI.Ссылка.ТестовыйСтенд КАК ТестовыйСтенд,
	|	ПараметрыПодключенияAPI.Ссылка.ПродуктивныйСтенд_Token КАК ПродуктивныйСтенд_Token,
	|	ПараметрыПодключенияAPI.Ссылка.ТестовыйСтенд_Token КАК ТестовыйСтенд_Token,
	|	ПараметрыПодключенияAPI.ИспользоватьПрокси КАК ИспользоватьПрокси,
	|	ПараметрыПодключенияAPI.ПротоколПрокси КАК ПротоколПрокси,
	|	ПараметрыПодключенияAPI.ПроксиСервер КАК ПроксиСервер,
	|	ПараметрыПодключенияAPI.ПортПрокси КАК ПортПрокси,
	|	ПараметрыПодключенияAPI.ИмяПользователяПрокси КАК ИмяПользователяПрокси,
	|	ПараметрыПодключенияAPI.ПарольПрокси КАК ПарольПрокси,
	|	ПараметрыПодключенияAPI.ИспользоватьАутентификациюОСПрокси КАК ИспользоватьАутентификациюОСПрокси,
	|	ПараметрыПодключенияAPI.ГруппаПользователя КАК ГруппаПользователя,
	|	ПараметрыПодключенияAPI.username КАК username,
	|	ПараметрыПодключенияAPI.password КАК password,
	|	ПараметрыПодключенияAPI.АдресДляРассылки КАК АдресДляРассылки,
	|	ИСТИНА КАК Использование,
	|	ПараметрыПодключенияAPI.Ссылка.НормализацияАдресаDaData КАК НормализацияАдресаDaData
	|ИЗ
	|	Справочник.ПараметрыПодключенияAPIИпотечныхБанков.НастройкиПравДоступаПользователей КАК ПараметрыПодключенияAPI
	|ГДЕ
	|	ПараметрыПодключенияAPI.Ссылка = &ПараметрыAPI
	|	И ПараметрыПодключенияAPI.ГруппаПользователя В(&ГруппыПользователя)
	|	И ПараметрыПодключенияAPI.ОбъектДоступа = &ОбъектДоступа
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПараметрыПодключенияAPIИпотечныхБанков.username,
	|	ПараметрыПодключенияAPIИпотечныхБанков.password,
	|	ПараметрыПодключенияAPIИпотечныхБанков.АдресДляРассылки,
	|	ПараметрыПодключенияAPIИпотечныхБанков.ПродуктивныйСтенд,
	|	ПараметрыПодключенияAPIИпотечныхБанков.ТестовыйСтенд,
	|	ПараметрыПодключенияAPIИпотечныхБанков.ПродуктивныйСтенд_Token,
	|	ПараметрыПодключенияAPIИпотечныхБанков.ТестовыйСтенд_Token,
	|	ПараметрыПодключенияAPIИпотечныхБанков.ИспользоватьПрокси,
	|	ПараметрыПодключенияAPIИпотечныхБанков.ПротоколПрокси,
	|	ПараметрыПодключенияAPIИпотечныхБанков.ПроксиСервер,
	|	ПараметрыПодключенияAPIИпотечныхБанков.ПортПрокси,
	|	ПараметрыПодключенияAPIИпотечныхБанков.ИмяПользователяПрокси,
	|	ПараметрыПодключенияAPIИпотечныхБанков.ПарольПрокси,
	|	ПараметрыПодключенияAPIИпотечныхБанков.ИспользоватьАутентификациюОСПрокси,
	|	NULL,
	|	NULL,
	|	NULL,
	|	ПараметрыПодключенияAPIИпотечныхБанков.АдресДляРассылки,
	|	ЛОЖЬ,
	|	ПараметрыПодключенияAPIИпотечныхБанков.НормализацияАдресаDaData
	|ИЗ
	|	Справочник.ПараметрыПодключенияAPIИпотечныхБанков КАК ПараметрыПодключенияAPIИпотечныхБанков
	|ГДЕ
	|	ПараметрыПодключенияAPIИпотечныхБанков.Ссылка = &ПараметрыAPI";	
		
	ГруппыПользователя = ПолучитьГруппыПользователя(Ответственный);
	Если ГруппыПользователя = Неопределено ИЛИ НЕ ГруппыПользователя.Количество() Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ПараметрыПодключенияAPI.ГруппаПользователя В(&ГруппыПользователя)", "И ЛОЖЬ");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ПараметрыПодключенияAPI.ОбъектДоступа = &ОбъектДоступа", "");
	Иначе
		Если ГруппыПользователя.Количество() > 1 Тогда
			ОбъектДоступа = ПолучитьОсновнойОбъектПользователя(Ответственный);
			Если ЗначениеЗаполнено(ОбъектДоступа) Тогда
				Запрос.УстановитьПараметр("ОбъектДоступа", ОбъектДоступа);
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ПараметрыПодключенияAPI.ГруппаПользователя В(&ГруппыПользователя)", "");
			Иначе
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ПараметрыПодключенияAPI.ОбъектДоступа = &ОбъектДоступа", "");
			КонецЕсли;
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ПараметрыПодключенияAPI.ОбъектДоступа = &ОбъектДоступа", "");	
		КонецЕсли;
		Запрос.УстановитьПараметр("ГруппыПользователя", ГруппыПользователя);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ПараметрыAPI", ПараметрыAPI);	
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		СтруктураПараметры = Новый Структура("username, password, username_common, password_common, АдресДляРассылки_common, ПродуктивныйСтенд, ТестовыйСтенд, ПродуктивныйСтенд_Token, ТестовыйСтенд_Token, Прокси, ГруппаПользователя, ПроксиСервер, АдресДляРассылки, НормализацияАдресаDaData");
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(СтруктураПараметры, Выборка);
			Если Выборка.ИспользоватьПрокси Тогда
				Прокси = Новый ИнтернетПрокси;
				Прокси.НеИспользоватьПроксиДляЛокальныхАдресов = Истина;
				Прокси.Установить(Выборка.ПротоколПрокси, Выборка.ПроксиСервер, Выборка.ПортПрокси, Выборка.ИмяПользователяПрокси, Выборка.ПарольПрокси, Выборка.ИспользоватьАутентификациюОСПрокси); //Прокси.Установить("https", "mosrfrfw01.absgroup.ru", "8080", , , Истина); 
				СтруктураПараметры.Прокси = Прокси;
			КонецЕсли;
			Если НЕ Выборка.Использование ИЛИ ДляАвторизации Тогда
				СтруктураПараметры.username = Выборка.username_common;
				СтруктураПараметры.password = Выборка.password_common;
			КонецЕсли;				
		КонецЕсли;
		
		Если ВыводитьПараметры Тогда
			Для каждого Элемент Из СтруктураПараметры Цикл
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Элемент.Ключ + " : " + Элемент.Значение);	
			КонецЦикла;
		КонецЕсли;
		
		Возврат СтруктураПараметры;	
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСекреты(ПараметрыAPI) Экспорт
	
	client_id = "";	
	client_secret = "";
	
	УстановитьПривилегированныйРежим(Истина);
    Данные = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(ПараметрыAPI, "Секреты");
	Если ТипЗнч(Данные) = Тип("Структура") И Данные.Свойство("client_id") И Данные.Свойство("client_secret") Тогда
		client_id = Данные.client_id;
		client_secret = Данные.client_secret;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
		
	Возврат Новый Структура("client_id, client_secret", client_id, client_secret);
	
КонецФункции

Процедура ЗаписатьСекреты(ПараметрыAPI, client_id, client_secret) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Данные = Новый Структура("client_id, client_secret", client_id, client_secret);
    ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(ПараметрыAPI, Данные, "Секреты");
    УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Функция ПолучитьОсновнойОбъектПользователя(Пользователь = Неопределено) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ОсновныеОбъектыДоступаПользователей.ОбъектДоступа КАК ОбъектДоступа
	|ИЗ
	|	РегистрСведений.ОсновныеОбъектыДоступаПользователей КАК ОсновныеОбъектыДоступаПользователей
	|ГДЕ
	|	ОсновныеОбъектыДоступаПользователей.Пользователь = &Пользователь";
	
	Запрос.УстановитьПараметр("Пользователь", ?(Пользователь = Неопределено, Пользователи.ТекущийПользователь(), Пользователь));
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.ОбъектДоступа;	
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьГруппыПользователя(Пользователь = Неопределено) Экспорт 
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ГруппыПользователейСостав.Ссылка КАК Группа
	|ИЗ
	|	Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
	|ГДЕ
	|	ГруппыПользователейСостав.Пользователь = &Пользователь";
	
	Запрос.УстановитьПараметр("Пользователь", ?(Пользователь = Неопределено, Пользователи.ТекущийПользователь(), Пользователь));
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Группа");
	КонецЕсли;
	
КонецФункции

Функция ПреобразоватьСтруктуруВJSON(Структура) Экспорт

	СтруктураJSON = "";
	Если НЕ Структура = Неопределено Тогда
		Попытка
			ЗаписьJSON = Новый ЗаписьJSON;
			ЗаписьJSON.УстановитьСтроку();
			ЗаписатьJSON(ЗаписьJSON, Структура);			
			СтруктураJSON = ЗаписьJSON.Закрыть();
		Исключение
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошбка преобразования структуры в JSON'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка, , , "Ошибка:" + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЕсли;	
		
	Возврат СтруктураJSON;	
	
КонецФункции

Функция ПреобразоватьОтветВСтруктуру(ТекстОтвета) Экспорт

	ОтветСервера = Неопределено;
	Попытка
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(ТекстОтвета);
		ОтветСервера = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'HTTP ответ ДомКлик'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Ошибка, , , "Ошибка:" + ТекстОтвета + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат ОтветСервера;
	
КонецФункции

Процедура УстановитьОбновляемыеЗначенияСделки(ДанныеЗаявки, Объект, ПисьмаКОтправке = Неопределено) Экспорт
	
	СтруктураОбновляемыхЗначений = ПолучитьОбновляемыеЗначенияСделки(ДанныеЗаявки, Объект.Ссылка, Объект.СтатусЗаявки, Объект.КомментарийСтатуса);
	
	Если СтруктураОбновляемыхЗначений = Неопределено Тогда
		Возврат;
	КонецЕсли;		
	
	ЗаполнитьЗначенияСвойств(Объект, СтруктураОбновляемыхЗначений);
	
	Если СтруктураОбновляемыхЗначений.Свойство("КомментарииЗаявкиТЧ") Тогда
		Объект.КомментарииЗаявки.Очистить();
		Для каждого СтрокаКомментария Из СтруктураОбновляемыхЗначений.КомментарииЗаявкиТЧ Цикл
			НоваСтрока = Объект.КомментарииЗаявки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваСтрока, СтрокаКомментария);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураОбновляемыхЗначений.Свойство("АнкетыТЧ") Тогда
		Для каждого СтрокаАнкеты Из СтруктураОбновляемыхЗначений.АнкетыТЧ Цикл
			НайденныеСтроки = Объект.Анкеты.НайтиСтроки(Новый Структура("ApplicationID", СтрокаАнкеты.ApplicationID));
			Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				Если НЕ НайденнаяСтрока.Статус = СтрокаАнкеты.Статус
					ИЛИ НЕ НайденнаяСтрока.ДатаПоследнегоИзменения = СтрокаАнкеты.ДатаПоследнегоИзменения
					ИЛИ НЕ НайденнаяСтрока.ДатаПодтверждения = СтрокаАнкеты.ДатаПодтверждения Тогда					
					ЗаполнитьЗначенияСвойств(НайденнаяСтрока, СтрокаАнкеты);
					Если НЕ СтруктураОбновляемыхЗначений.Свойство("Модифицированность")
						ИЛИ (СтруктураОбновляемыхЗначений.Свойство("Модифицированность") И НЕ СтруктураОбновляемыхЗначений.Модифицированность) Тогда
						СтруктураОбновляемыхЗначений.Вставить("Модифицированность", Истина);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		АнкетыОдобрены = Истина;		
		Для каждого СтрокаАнкета Из Объект.Анкеты Цикл
			Если НЕ СтрокаАнкета.Статус = Справочники.СтатусыИпотечныхАнкетДомКлик.Одобрено Тогда
				АнкетыОдобрены = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если АнкетыОдобрены И Объект.СтатусЗаявки = ПолучитьСтатусЗаявкиПоID(8060) Тогда
			Объект.ДатаПодачиЗаявки = ТекущаяДата();
			Объект.Черновик = Ложь;
			Объект.ДатаУстановкиСтатуса = ТекущаяДата();
			Объект.СтатусЗаявки = ПредопределенноеЗначение("Справочник.СтатусыИпотечныхЗаявок.ЗаявкаНаправленаВБанк");
			Объект.СостояниеЗаявки = ПредопределенноеЗначение("Перечисление.СостоянияИпотечныхЗаявок.Отправка");					
			Объект.РешениеБанка = ПредопределенноеЗначение("Справочник.РешенияБанков.ПустаяСсылка");					
			Объект.УспешнаяОтправка = Истина;
			Если НЕ СтруктураОбновляемыхЗначений.Свойство("Модифицированность")
				ИЛИ (СтруктураОбновляемыхЗначений.Свойство("Модифицированность") И НЕ СтруктураОбновляемыхЗначений.Модифицированность) Тогда
				СтруктураОбновляемыхЗначений.Вставить("Модифицированность", Истина);
			КонецЕсли;
			Если НЕ СтруктураОбновляемыхЗначений.Свойство("ОтправлятьОповещение")
				ИЛИ (СтруктураОбновляемыхЗначений.Свойство("ОтправлятьОповещение") И НЕ СтруктураОбновляемыхЗначений.ОтправлятьОповещение) Тогда
				СтруктураОбновляемыхЗначений.Вставить("ОтправлятьОповещение", Истина);
			КонецЕсли;			
		КонецЕсли;						
	КонецЕсли;
		
	Если СтруктураОбновляемыхЗначений.Модифицированность Тогда
		Объект.Записать(РежимЗаписиДокумента.Проведение);
	КонецЕсли;
	
	Если СтруктураОбновляемыхЗначений.ОтправлятьОповещение Тогда
		Попытка
			ОтправитьОповещениеОбИзмененииСтатуса(СобратьСтруктуруПисьмаДляМенеджера(Объект));
		Исключение
		КонецПопытки;
	КонецЕсли;			
	
КонецПроцедуры

Функция ПолучитьОбновляемыеЗначенияСделки(Данные, ИпотечнаяЗаявка, ТекущийСтатусЗаявки, КомментарийСтатусаЗаявки, ТолькоОтправкаПисем = Ложь) Экспорт
	
	ДанныеСделки = ?(ТипЗнч(Данные) = Тип("Строка"), УправлениеИпотечнымиЗаявкамиДомКлик.ПреобразоватьОтветВСтруктуру(Данные), Данные);
	
	Если ДанныеСделки = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	СоответствиеПолей = Новый Соответствие();
	СоответствиеПолей.Вставить("approvedSum", "sum_approved");		
	СоответствиеПолей.Вставить("loanPeriod", "СрокКредита");
	СоответствиеПолей.Вставить("requestedSum", "ПредполагаемаяСтоимостьОН");	
	СоответствиеПолей.Вставить("monthlyPayment", "ЕжемесячныйПлатеж");
	СоответствиеПолей.Вставить("interestRate", "ПроцентнаяСтавка");
	СоответствиеПолей.Вставить("overpaymentSum", "Переплата");
	СоответствиеПолей.Вставить("requiredIncomeSum", "НеобходимыйДоход");
	СоответствиеПолей.Вставить("sumSupposes", "СуммаКредитаВРублях");
	СоответствиеПолей.Вставить("initialFee", "ПервоначальныйВзнос");
	СоответствиеПолей.Вставить("AuthorID", "AuthorID");
	СоответствиеПолей.Вставить("dealStatusId", "СтатусЗаявки");
	СоответствиеПолей.Вставить("borrowerCasId", "BorrowerCasID");
	СоответствиеПолей.Вставить("comment", "КомментарийКЗаявке");
	//СоответствиеПолей.Вставить("id", "ID_Заявки");
	//СоответствиеПолей.Вставить("productId", "ВидОбъектаНедвижимости");
	//СоответствиеПолей.Вставить("officeId", "ОтделениеБанка");	
	
	ТекущаяСтруктураСделки = СоздатьСтруктуруСделкиДляОбновления(ИпотечнаяЗаявка);
	
	СтруктураСделки = Новый Структура();
	
	Для каждого Элемент Из СоответствиеПолей Цикл
		НайденноеЗначение = Неопределено;
		ДанныеСделки.Свойство(Элемент.Ключ, НайденноеЗначение);
		Если НЕ НайденноеЗначение = Неопределено Тогда			
			НайденноеТекущееЗначение = Неопределено;
			ТекущаяСтруктураСделки.Свойство(Элемент.Ключ, НайденноеТекущееЗначение);
			Если НЕ НайденноеТекущееЗначение = Неопределено Тогда
				Если НайденноеЗначение = НайденноеТекущееЗначение Тогда
					Продолжить;	
				КонецЕсли;
			КонецЕсли;			
			Если Элемент.Значение = "ВидОбъектаНедвижимости" Тогда
				ЗначениеСсылка = Справочники.ВидыОбъектовНедвижимости.НайтиПоРеквизиту("ID", НайденноеЗначение);		
				СтруктураСделки.Вставить(Элемент.Значение, ЗначениеСсылка);				
			ИначеЕсли Элемент.Значение = "СтатусЗаявки" Тогда
				ЗначениеСсылка = Справочники.СтатусыИпотечныхЗаявок.НайтиПоРеквизиту("ID", НайденноеЗначение);
				СтруктураСделки.Вставить(Элемент.Значение, ЗначениеСсылка);
			Иначе
				СтруктураСделки.Вставить(Элемент.Значение, НайденноеЗначение);
			КонецЕсли;
		Иначе
			НайденноеТекущееЗначение = Неопределено;
			ТекущаяСтруктураСделки.Свойство(Элемент.Ключ, НайденноеТекущееЗначение);
			Если ЗначениеЗаполнено(НайденноеТекущееЗначение) Тогда
				СтруктураСделки.Вставить(Элемент.Значение, Неопределено);
			КонецЕсли;				
		КонецЕсли;
	КонецЦикла;
		
	Если СтруктураСделки.Свойство("СтатусЗаявки") Тогда
		СтатусЗаявки = СтруктураСделки.СтатусЗаявки;	
		
		Если НЕ ЗначениеЗаполнено(СтатусЗаявки) Тогда
			СтруктураСделки.Вставить("УспешнаяОтправка", Ложь);
		Иначе
			СтруктураСделки.Вставить("УспешнаяОтправка", Истина);	
		КонецЕсли;
		
		Если НЕ ТекущийСтатусЗаявки = СтатусЗаявки Тогда
			СтруктураСделки.Вставить("ДатаУстановкиСтатуса", ТекущаяДата());
			Модифицированность = Истина;
		КонецЕсли;
		
		Статус_ID = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтатусЗаявки, "ID");
		СтруктураСостояния = ПолучитьСостояниеСделки_РешениеБанка(Статус_ID, ТолькоОтправкаПисем); 	
		Для каждого Элемент Из СтруктураСостояния Цикл
			СтруктураСделки.Вставить(Элемент.Ключ, Элемент.Значение);	
		КонецЦикла;
	КонецЕсли;
	
	Если ДанныеСделки.Свойство("applications") И НЕ ДанныеСделки.applications = Неопределено Тогда
		СтруктураСделки.Вставить("АнкетыТЧ", Новый Массив);
		Для каждого Анкета Из ДанныеСделки.applications Цикл
			Если Анкета.Свойство("acceptance") Тогда
				acceptance = Анкета.acceptance;
				СтруктураСтроки = Новый Структура("ApplicationID, Статус, ДатаПоследнегоИзменения, ДатаПодтверждения");
				СтруктураСтроки.ApplicationID = acceptance.applicationId;
				СтруктураСтроки.Статус = ПолучитьСтатусИпотечнойАнкеты(acceptance.status);
				СтруктураСтроки.ДатаПоследнегоИзменения = ПреобразоватьКДате(acceptance.lastRequestMoment);
				СтруктураСтроки.ДатаПодтверждения = ПреобразоватьКДате(acceptance.signMoment);
			   	СтруктураСделки.АнкетыТЧ.Добавить(СтруктураСтроки);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Модифицированность = Ложь;
	ОтправлятьОповещение = Ложь;
	Если ДанныеСделки.Свойство("events") И НЕ ДанныеСделки.events = Неопределено Тогда
		КомментарийСтатуса = "";
		ЗаполнитьИсториюСтатусов(ДанныеСделки.events, ИпотечнаяЗаявка, КомментарийСтатуса, ОтправлятьОповещение);
		Если НЕ КомментарийСтатусаЗаявки = КомментарийСтатуса Тогда  
			СтруктураСделки.Вставить("КомментарийСтатуса", КомментарийСтатуса);
			Модифицированность = Истина;
			ОтправлятьОповещение = Истина;
		КонецЕсли;		
		Если ОтправлятьОповещение Тогда
			СтруктураСделки.Вставить("КомментарииЗаявкиТЧ", Новый Массив);
			Для каждого СтрокаСтатуса Из ДанныеСделки.events Цикл
				СтруктураСтроки = Новый Структура("Комментарий, ДатаДобавления");
				СтруктураСтроки.Комментарий = СтрокаСтатуса.Comment;
				СтруктураСтроки.ДатаДобавления = УправлениеИпотечнымиЗаявкамиДомКлик.ПреобразоватьКДате(СтрокаСтатуса.createdTime);
				СтруктураСделки.КомментарииЗаявкиТЧ.Добавить(СтруктураСтроки);
			КонецЦикла;	
		КонецЕсли;	
	КонецЕсли;
	
	СтруктураСделки.Вставить("ОтправлятьОповещение", ОтправлятьОповещение);
	СтруктураСделки.Вставить("Модифицированность", Модифицированность);
	  
	Возврат СтруктураСделки;  
	  
КонецФункции

Функция ПроверкаСтатусовИпотечныхЗаявок_Регламентно(Ссылка = Неопределено) Экспорт  
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИпотечнаяЗаявка.Ссылка КАК Ссылка,
	|	ИпотечнаяЗаявка.ID_Заявки КАК ID_Заявки,
	|	ИпотечнаяЗаявка.ТестоваяЗаявка КАК Тест,
	|	ЕСТЬNULL(ПараметрыПодключенияAPIИпотечныхБанков.Ссылка, ЗНАЧЕНИЕ(Справочник.ПараметрыПодключенияAPIИпотечныхБанков.ПустаяСсылка)) КАК ПараметрыAPI
	|ИЗ
	|	Документ.ИпотечнаяЗаявка КАК ИпотечнаяЗаявка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Банки КАК ИпотечныеБанки
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПараметрыПодключенияAPIИпотечныхБанков КАК ПараметрыПодключенияAPIИпотечныхБанков
	|			ПО ИпотечныеБанки.ПараметрыПодключения = ПараметрыПодключенияAPIИпотечныхБанков.Ссылка
	|		ПО ИпотечнаяЗаявка.РекомендуемыйБанк = ИпотечныеБанки.Ссылка
	|ГДЕ
	|	ИпотечнаяЗаявка.УспешнаяОтправка
	|	И ИпотечнаяЗаявка.Проведен
	|	И НЕ ИпотечнаяЗаявка.ПометкаУдаления
	|	И ИпотечнаяЗаявка.СостояниеЗаявки = ЗНАЧЕНИЕ(Перечисление.СостоянияИпотечныхЗаявок.Отправка)
	|	И ИпотечнаяЗаявка.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИпотечнаяЗаявка.МоментВремени";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если НЕ ЗначениеЗаполнено(Выборка.ПараметрыAPI) Тогда
				Продолжить;
			КонецЕсли;
			Ошибки = "";
			ДанныеЗаявки = ПолучитьДанныеСделки(Выборка.ПараметрыAPI, Выборка.ID_Заявки, Ошибки, Выборка.Тест);
			Если НЕ Ошибки = "" ИЛИ ДанныеЗаявки = Неопределено Тогда
				СоздатьЗаписьЛога(Выборка.Ссылка, Ошибки);
				Продолжить;	
			КонецЕсли;			
			Объект = Выборка.Ссылка.ПолучитьОбъект();
			Если НЕ Объект = Неопределено Тогда
				УстановитьОбновляемыеЗначенияСделки(ДанныеЗаявки, Объект);	
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область РассылкаПисем

Функция СобратьСтруктуруПисьмаДляМенеджера(Объект) Экспорт
	
	ПараметрыAPI = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.РекомендуемыйБанк, "ПараметрыПодключения");
	Если НЕ ЗначениеЗаполнено(ПараметрыAPI) Тогда
		Возврат Неопределено;	
	КонецЕсли;
	
	ПараметрыПодключения = ПолучитьПараметрыПодключения(ПараметрыAPI, Объект.Ответственный);	
	Если ПараметрыПодключения = Неопределено Тогда
		Возврат Неопределено;	
	КонецЕсли;
	
	МассивАдресатов = Новый Массив;	
	АдресПочты = ?(ЗначениеЗаполнено(ПараметрыПодключения.АдресДляРассылки), ПараметрыПодключения.АдресДляРассылки, АдресЭлектроннойПочты(Объект.Ответственный));
	Если ЗначениеЗаполнено(АдресПочты) Тогда
		МассивАдресатов.Добавить(АдресПочты);
	КонецЕсли;

	Если МассивАдресатов.Количество() Тогда
		ПараметрыСообщения = Новый Структура;
		ПараметрыСообщения.Вставить("Кому", ПолучитьСтрокуИзМассиваПодстрок(МассивАдресатов, ";"));
		Копии = Новый Массив;
		Если ЗначениеЗаполнено(ПараметрыПодключения.АдресДляРассылки_common) Тогда
			Копии.Добавить(Новый Структура("Адрес, Представление", ПараметрыПодключения.АдресДляРассылки_common, ПараметрыПодключения.АдресДляРассылки_common));  //ПараметрыПодключения.username_common
			ПараметрыСообщения.Вставить("Копии", Копии);
		КонецЕсли;
		ПараметрыСообщения.Вставить("ОбрабатыватьТексты", Ложь);
		ПараметрыСообщения.Вставить("Тема", "" + Объект.РекомендуемыйБанк + ". Заявка клиента " + Объект.ФИОКлиента + ", переведена в статус «" + Объект.СтатусЗаявки + "»"); //"~~Изменение статуса ипотечной заявки ID = " + СтрЗаменить(Объект.ID_Заявки, Символы.НПП, "")		
		ПараметрыСообщения.Вставить("ТипТекста", "HTML");
		ПараметрыСообщения.Вставить("Тело", ПодготовитьТелоПисьмаМенеджеру(Объект));
		ПараметрыСообщения.Вставить("Важность", ВажностьИнтернетПочтовогоСообщения.Высокая);
		
		Возврат ПараметрыСообщения;
	КонецЕсли;	
		
КонецФункции

Функция ПолучитьСтрокуИзМассиваПодстрок(Массив, Разделитель = ",") Экспорт
	
	Результат = "";	
	Для Каждого Элемент Из Массив Цикл		
		Подстрока = ?(ТипЗнч(Элемент) = Тип("Строка"), Элемент, Строка(Элемент));		
		РазделительПодстрок = ?(ПустаяСтрока(Результат), "", Разделитель);		
		Результат = Результат + РазделительПодстрок + Подстрока;		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция АдресЭлектроннойПочты(Получатель) Экспорт
	
	Адрес = "";
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		МодульУправлениеКонтактнойИнформацией = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформацией");
		Если ТипЗнч(Получатель) = Тип("СправочникСсылка.Пользователи") Тогда
			Адрес = МодульУправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
				Получатель, Справочники.ВидыКонтактнойИнформации.EmailПользователя);
		ИначеЕсли ТипЗнч(Получатель) = Тип("СправочникСсылка.ВнешниеПользователи") Тогда
			Адрес = ЭлектроннаяПочтаВнешнегоПользователя(Получатель);
		КонецЕсли;
	КонецЕсли;
	        
	Если НЕ ЗначениеЗаполнено(Адрес) Тогда
		Если НЕ ЗначениеЗаполнено(Адрес) Тогда
			ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Получатель.ИдентификаторПользователяИБ);
			Если НЕ ПользовательИБ = Неопределено Тогда
				ПользовательОС = СокрЛП(ПользовательИБ.ПользовательОС);
				Если СтрНайти(ПользовательОС, "\\ABSGROUP\") > 0 Тогда
				 	Адрес = СтрЗаменить(ПользовательОС, "\\ABSGROUP\", "") + "@absgroup.ru";
				ИначеЕсли СтрНайти(ПользовательОС, "ABSGROUP\") > 0 Тогда
				 	Адрес = СтрЗаменить(ПользовательОС, "ABSGROUP\", "") + "@absgroup.ru";
				КонецЕсли;			
		    КонецЕсли;		
		КонецЕсли;			
	КонецЕсли;		
			
	Возврат Адрес;
	
КонецФункции

Функция ЭлектроннаяПочтаВнешнегоПользователя(Получатель)
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		МодульУправлениеКонтактнойИнформациейСлужебный = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформациейСлужебный");
		Возврат МодульУправлениеКонтактнойИнформациейСлужебный.ПервоеЗначениеКонтактнойИнформацииОбъектаПоТипу(
			Получатель.ОбъектАвторизации, Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

Функция ПодготовитьТелоПисьмаМенеджеру(Объект, Режим = "HTML")
	
	Если Режим = "HTML" Тогда
		ЗаголовокПисьма = Строка(Объект);
		
		СтруктураПисьма = Новый ТаблицаЗначений;
		СтруктураПисьма.Колонки.Добавить("Ключ",,"Ключ");
		СтруктураПисьма.Колонки.Добавить("Значение",,"Значение");
		
		Стр = СтруктураПисьма.Добавить();
		Стр.Ключ = "ФИО клиента";
		Стр.Значение = Объект.ФИОКлиента;
		
		Стр = СтруктураПисьма.Добавить();
		Стр.Ключ = "Телефон клиента";
		Стр.Значение = Объект.НомерТелефонаКлиента;		
		
		Стр = СтруктураПисьма.Добавить();
		Стр.Ключ = "Почта клиента";
		Стр.Значение = Объект.EmailКлиента;
		
		Стр = СтруктураПисьма.Добавить();
		Стр.Ключ = "Дата отправки заявки в банк";
		Стр.Значение = Объект.ДатаПодачиЗаявки;		
		
		Стр = СтруктураПисьма.Добавить();
		Стр.Ключ = "Банк";
		Стр.Значение = Объект.РекомендуемыйБанк;		
		
		Стр = СтруктураПисьма.Добавить();
		Стр.Ключ = "Отделение банка";
		Стр.Значение = Справочники.ОтделенияИпотечныхБанков.НайтиПоРеквизиту("ID", Объект.ЦИК, , Объект.РекомендуемыйБанк);
		
		Стр = СтруктураПисьма.Добавить();
		Стр.Ключ = "Текущий статус заявки";
		Стр.Значение = Объект.СтатусЗаявки;		
		
		Стр = СтруктураПисьма.Добавить();
		Стр.Ключ = "Дата установки текущего статуса";
		Стр.Значение = Объект.ДатаУстановкиСтатуса;		
		
		Если Объект.СтатусЗаявки = Справочники.СтатусыИпотечныхЗаявок.КредитОдобрен Тогда
			Стр = СтруктураПисьма.Добавить();
			Стр.Ключ = "Сумма кредита запрошенная";
			Стр.Значение = Объект.СуммаКредитаВРублях;	
			
			Стр = СтруктураПисьма.Добавить();
			Стр.Ключ = "Сумма кредита одобренная";
			Стр.Значение = Объект.sum_approved;	
		Иначе
			Стр = СтруктураПисьма.Добавить();
			Стр.Ключ = "Комментарий статуса";
			Стр.Значение = Объект.КомментарийСтатуса;			
		КонецЕсли;
		
		ТекстHTML = "<table border=""2"" bordercolor=""black"" cellpadding=""3"" cellspacing=""0"" style=""font-size: 9pt; margin-left: 40px;"">" + 
						"<caption>" + ЗаголовокПисьма + "</caption>" + 
							"<tbody>"; //+
							
								//"<tr align=""center"">" + 
								//	"<td height=""40"">Измененные реквизиты</td>" +
								//	"<td height=""40"">Старое значение</td>" +
								//"</tr>";
													
		Для каждого ЭлементСтруктуры Из СтруктураПисьма Цикл
			ТекстHTML = ТекстHTML +
			"<tr>" +
				"<td >" + ЭлементСтруктуры.Ключ + "</td>" + 
				"<td >" + Строка(ЭлементСтруктуры.Значение) + "</td>" +  
			"</tr>";	
		КонецЦикла;
		
		ТекстHTML = ТекстHTML +														
				"</tbody>" +
			"</table>" +
		"<p>&nbsp;</p>";
		
		Возврат ТекстHTML;
	Иначе
		Тело = "Добрый день, " + Объект.Ответственный + "! " + Символы.ПС;
		Тело = Тело + "Уведомляем Вас о смене статуса заявки на кредит в " + Объект.РекомендуемыйБанк + ". " + Символы.ПС + Символы.ВК;
		Тело = Тело + "Клиент " + Объект.ФИОКлиента + "(" + Объект.НомерТелефонаКлиента + "). " + Символы.ПС;
		Тело = Тело + "Статус Ипотечной заявки № " + Объект.Номер + " от " + Объект.Дата + " изменен на <" + Объект.СтатусЗаявки + ">. "; 
		Если ЗначениеЗаполнено(Объект.КомментарийСтатуса) Тогда
			Тело = Тело + Символы.ПС + "Комментарий: " + Объект.КомментарийСтатуса + ". ";	
		КонецЕсли;		
		Если Объект.СтатусЗаявки = Справочники.СтатусыИпотечныхЗаявок.КредитОдобрен Тогда
			Тело = Тело + Символы.ПС + "Запрашиваемая сумма кредита: " + Объект.СуммаКредитаВРублях + " руб.";
			Тело = Тело + Символы.ПС + "Одобренная сумма кредита: " + Объект.sum_approved + " руб.";		
		КонецЕсли;
		
		Возврат Тело;
	КонецЕсли;
	
КонецФункции

Процедура ОтправитьОповещениеОбИзмененииСтатуса(ПараметрыПисьма = Неопределено, УчетнаяЗапись = Неопределено) Экспорт
	
	МодульРаботаСПочтовымиСообщениями = ОбщегоНазначения.ОбщийМодуль("РаботаСПочтовымиСообщениями");
	Попытка 
		МодульРаботаСПочтовымиСообщениями.ОтправитьПочтовоеСообщение(
			?(УчетнаяЗапись = Неопределено, МодульРаботаСПочтовымиСообщениями.СистемнаяУчетнаяЗапись(), УчетнаяЗапись), ПараметрыПисьма);
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'ОтправитьОповещениеОбИзмененииСтатуса.Уведомление о смене статусов'",
			ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
			УровеньЖурналаРегистрации.Ошибка,,,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка при отправке уведомления о смене статусов ипотечных заявок: %1'"), 
			   ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));			  
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область HTTPЗапрос

Функция ВыполнитьHTTPЗапрос(ПараметрыЗапроса, Заголовки, ТолькоКодСостояния = Ложь)

	HTTPЗапрос = ПодготовитьHTTPЗапрос(ПараметрыЗапроса.АдресРесурса, Заголовки, ПараметрыЗапроса.ТелоЗапроса, ПараметрыЗапроса.HTTPМетод, ПараметрыЗапроса.ИмяФайлаЗапроса, ПараметрыЗапроса.ДвоичныеДанные); 
	HTTPОтвет = Неопределено;                                                                                                          
		
	Попытка		
		HTTPСоединение = Новый HTTPСоединение(ПараметрыЗапроса.Сервер, ПараметрыЗапроса.Порт, , , ПараметрыЗапроса.Прокси, ПараметрыЗапроса.Таймаут, ПараметрыЗапроса.ЗащищенноеСоединение);		
		Если ПараметрыЗапроса.HTTPМетод = "POST" Тогда
			HTTPОтвет = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
		ИначеЕсли ПараметрыЗапроса.HTTPМетод = "GET" Тогда
			HTTPОтвет = HTTPСоединение.Получить(HTTPЗапрос);
		Иначе
			HTTPОтвет = HTTPСоединение.ВызватьHTTPМетод(ПараметрыЗапроса.HTTPМетод, HTTPЗапрос);
		КонецЕсли;
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'HTTP запрос ДомКлик'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
		
	Если НЕ HTTPОтвет = Неопределено Тогда				
		Если ТолькоКодСостояния Тогда
			Возврат HTTPОтвет.КодСостояния;	
		КонецЕсли;
		
		ТекстОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();		
		ОтветСервера = Неопределено;
		Попытка
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(ТекстОтвета);
			ОтветСервера = ПрочитатьJSON(ЧтениеJSON);
			ЧтениеJSON.Закрыть();
		Исключение
			ЗаписьЖурналаРегистрации(НСтр("ru = 'HTTP ответ ДомКлик'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка, , , "Ошибка:" + ТекстОтвета + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
			
		Возврат ОтветСервера;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПодготовитьHTTPЗапрос(АдресРесурса, Заголовки, ПараметрыЗапроса, HTTPМетод = "POST", ИмяФайлаЗапроса = "", ДвоичныеДанные = Неопределено) Экспорт
	
	HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса, Заголовки);
	
	Если ТипЗнч(ПараметрыЗапроса) = Тип("Строка") Тогда		
		HTTPЗапрос.УстановитьТелоИзСтроки(ПараметрыЗапроса, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);	
	Иначе		
		Если HTTPМетод = "POST" Тогда
			Если НЕ ДвоичныеДанные = Неопределено Тогда
				HTTPЗапрос.УстановитьТелоИзДвоичныхДанных(ДвоичныеДанные);	
			ИначеЕсли НЕ ПустаяСтрока(ИмяФайлаЗапроса) Тогда
				HTTPЗапрос.УстановитьИмяФайлаТела(ИмяФайлаЗапроса);
			Иначе
				ЗаписьJSON = Новый ЗаписьJSON;
				ЗаписьJSON.УстановитьСтроку();
				ЗаписатьJSON(ЗаписьJSON, ПараметрыЗапроса);			
				СтрокаПараметров = ЗаписьJSON.Закрыть();
				HTTPЗапрос.УстановитьТелоИзСтроки(СтрокаПараметров, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
			КонецЕсли;
		ИначеЕсли HTTPМетод = "PUT" Тогда			
			ЗаписьJSON = Новый ЗаписьJSON;
			ЗаписьJSON.УстановитьСтроку();
			ЗаписатьJSON(ЗаписьJSON, ПараметрыЗапроса);			
			СтрокаПараметров = ЗаписьJSON.Закрыть();
			HTTPЗапрос.УстановитьТелоИзСтроки(СтрокаПараметров, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);			
		ИначеЕсли HTTPМетод = "GET" Тогда
			СписокПараметров = Новый Массив;
			Для Каждого Параметр Из ПараметрыЗапроса Цикл
				СписокПараметров.Добавить(Параметр.Ключ + "=" + КодироватьСтроку(Параметр.Значение, СпособКодированияСтроки.КодировкаURL));
			КонецЦикла;
			СтрокаПараметров = СтрСоединить(СписокПараметров, "&");			
			АдресРесурса = АдресРесурса + ?(НЕ ПустаяСтрока(СтрокаПараметров), "?" + СтрокаПараметров, "");
			HTTPЗапрос.АдресРесурса = АдресРесурса;
		Иначе
			СтрокаПараметров = "";
		КонецЕсли;
	КонецЕсли;
	
	Возврат HTTPЗапрос;

КонецФункции

Функция ПолучитьПрокси()
	
	Прокси = Новый ИнтернетПрокси;
	Прокси.Установить("HTTP", "Mosrfrfw01.absgroup.ru", 8080); 
	
	Возврат Прокси; //ПолучениеФайловИзИнтернетаКлиентСервер.ПолучитьПрокси("https")
	
КонецФункции

Функция ПолучитьПараметрыЗапроса(HTTPМетод, Сервер, АдресРесурса, ТелоЗапроса, Прокси, Порт = Неопределено, Пользователь = Неопределено, Пароль = Неопределено, ИмяФайлаЗапроса = "", ДвоичныеДанные = Неопределено) 
	
	//ssl = Новый ЗащищенноеСоединениеOpenSSL(Новый СертификатКлиентаWindows(), Новый СертификатыУдостоверяющихЦентровWindows());
	ssl = Новый ЗащищенноеСоединениеOpenSSL(Неопределено, Неопределено);
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("Сервер", Сервер);
	ПараметрыЗапроса.Вставить("Порт", Порт);
	ПараметрыЗапроса.Вставить("Пользователь", Неопределено);
	ПараметрыЗапроса.Вставить("Пароль", Неопределено);
	ПараметрыЗапроса.Вставить("Прокси", Прокси);
	ПараметрыЗапроса.Вставить("Таймаут", 60);
	ПараметрыЗапроса.Вставить("ЗащищенноеСоединение", ssl); 
	
	ПараметрыЗапроса.Вставить("HTTPМетод", HTTPМетод);	
	ПараметрыЗапроса.Вставить("АдресРесурса", АдресРесурса);
	ПараметрыЗапроса.Вставить("ТелоЗапроса", ТелоЗапроса);
	ПараметрыЗапроса.Вставить("ИмяФайлаЗапроса", ИмяФайлаЗапроса);
	ПараметрыЗапроса.Вставить("ДвоичныеДанные", ДвоичныеДанные);
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

Функция ПолучитьBase64ЗаголовокАвторизации(ID, Secret)

    КодировкаФайла = КодировкаТекста.UTF8;
    ВременныйФайл = ПолучитьИмяВременногоФайла();
	
	Запись = Новый ЗаписьТекста(ВременныйФайл, КодировкаФайла);
    Запись.Записать(ID + ":" + Secret);
    Запись.Закрыть();

    ДвДанные = Новый ДвоичныеДанные(ВременныйФайл);
    Результат = Base64Строка(ДвДанные);
	
	Результат = СтрЗаменить(Результат, Символы.ВК, "");
	Результат = СтрЗаменить(Результат, Символы.ПС, "");	
	
    УдалитьФайлы(ВременныйФайл);

    Результат = Сред(Результат, 5);

    Возврат Результат;

КонецФункции

#КонецОбласти

#Область Вспоимогательное

Функция ПоместитьФайлВТелоЗапроса(ПрикрепляемыйФайл, Boundary, ТипДокумента, ПодтипДокумента, Ошибки = "") 
	
	ИмяФайлаДляЗагрузки = ПолучитьПутьКФайлу(ПрикрепляемыйФайл);
	
	Если ИмяФайлаДляЗагрузки = "" Тогда
		Ошибки = "Не установлен путь к файлу";
		Возврат Неопределено;
	КонецЕсли;
	
	Файл = Новый Файл(ИмяФайлаДляЗагрузки);
	Если НЕ Файл.Существует() Тогда
		Ошибки = "Файл " + ИмяФайлаДляЗагрузки + " не существует.";
		Возврат Неопределено; 
	КонецЕсли; 
	
	ДопустимыйРазмерФайлаВБайтах = 20000000; //20971520;	
	Если Файл.Размер() > ДопустимыйРазмерФайлаВБайтах Тогда 
		Ошибки = "Размер файла " + ИмяФайлаДляЗагрузки + " превышает допустимый.";
		Возврат Неопределено; 
	КонецЕсли;
	
	ИмяФайлаДляСервера = Файл.ИмяБезРасширения;	
	ИмяФайлаДляСервера = СтрЗаменить(Транслит(ИмяФайлаДляСервера), "№", "");
	
	ИмяФайлаДляСервера = ИмяФайлаДляСервера + Файл.Расширение;
	
	РасширениеФайлаДляСервера = СтрЗаменить(Сред(Файл.Расширение, 2), ".", "");
	
	МассивФайлов = Новый Массив; 
	имяФайлаСПараметрами = ПолучитьимяВременногоФайла("txt");
	
	ЗаписьТекста = Новый ЗаписьТекста(имяФайлаСПараметрами, КодировкаТекста.ANSI, Символы.ПС, Ложь); 
	ЗаписьТекста.ЗаписатьСтроку("--" + Boundary);    
	ЗаписьТекста.ЗаписатьСтроку("Content-Disposition: form-data; name=""file""; filename=""" + ИмяФайлаДляСервера + """");
	ЗаписьТекста.ЗаписатьСтроку("Content-Type: " + ПолучитьСоответствиеMimeType(РасширениеФайлаДляСервера));
	ЗаписьТекста.ЗаписатьСтроку("");
	ЗаписьТекста.Закрыть();  
	
	МассивФайлов.Добавить(имяФайлаСПараметрами);
	МассивФайлов.Добавить(ИмяФайлаДляЗагрузки);
	
	имяФайлаСПараметрами = ПолучитьимяВременногоФайла("txt");
	ЗаписьТекста = Новый ЗаписьТекста(имяФайлаСПараметрами, КодировкаТекста.ANSI, Символы.ПС, Ложь); 
	ЗаписьТекста.ЗаписатьСтроку("");
	ЗаписьТекста.ЗаписатьСтроку("");
	
	ЗаписьТекста.ЗаписатьСтроку("--" + Boundary); 
	ЗаписьТекста.ЗаписатьСтроку("Content-Disposition: form-data; name=""typeId""");
	ЗаписьТекста.ЗаписатьСтроку("");
	ЗаписьТекста.ЗаписатьСтроку(ТипДокумента);	
	
	Если ЗначениеЗаполнено(ПодтипДокумента) Тогда
		ЗаписьТекста.ЗаписатьСтроку("");
		ЗаписьТекста.ЗаписатьСтроку("--" + Boundary); 
		ЗаписьТекста.ЗаписатьСтроку("Content-Disposition: form-data; name=""subtypeId""");
		ЗаписьТекста.ЗаписатьСтроку("");
		ЗаписьТекста.ЗаписатьСтроку(ПодтипДокумента);	
	КонецЕсли;	
	
	ЗаписьТекста.ЗаписатьСтроку("--" + boundary + "--");
	ЗаписьТекста.Закрыть();
	МассивФайлов.Добавить(имяФайлаСПараметрами);
	
	ПапкаВременныхФайлов = КаталогВременныхФайлов();
	ИмяФайлаОтправки = ПапкаВременныхФайлов + Boundary + ".txt";
	
	ОбъединитьФайлы(МассивФайлов, ИмяФайлаОтправки);	
	
	Возврат ИмяФайлаОтправки;	
	
КонецФункции

Функция ПоместитьБинарныеДанныеВТелоЗапроса(ПрикрепляемыйФайл, Boundary, ТипДокумента, ПодтипДокумента = Неопределено, Ошибки = "") 
	
	ИмяФайлаДляЗагрузки = ПолучитьПутьКФайлу(ПрикрепляемыйФайл);
	
	Если ИмяФайлаДляЗагрузки = "" Тогда
		Ошибки = "Не установлен путь к файлу";
		Возврат Неопределено;
	КонецЕсли;
	
	Файл = Новый Файл(ИмяФайлаДляЗагрузки);
	Если НЕ Файл.Существует() Тогда
		Ошибки = "Файл " + ИмяФайлаДляЗагрузки + " не существует.";
		Возврат Неопределено; 
	КонецЕсли; 
	
	ДопустимыйРазмерФайлаВБайтах = 20000000; //20971520;	
	Если Файл.Размер() > ДопустимыйРазмерФайлаВБайтах Тогда 
		Ошибки = "Размер файла " + ИмяФайлаДляЗагрузки + " превышает допустимый.";
		Возврат Неопределено; 
	КонецЕсли;
	
	ИмяФайлаДляСервера = Файл.ИмяБезРасширения;	
	ИмяФайлаДляСервера = СтрЗаменить(Транслит(ИмяФайлаДляСервера), "№", "");
	
	ИмяФайлаДляСервера = ИмяФайлаДляСервера + Файл.Расширение;		
	РасширениеФайлаДляСервера = СтрЗаменить(Сред(Файл.Расширение, 2), ".", "");
	
	ДанныеФайла = Новый ДвоичныеДанные(ИмяФайлаДляЗагрузки);
    ПотокТело = Новый ПотокВПамяти();
    ЗаписьДанных = Новый ЗаписьДанных(ПотокТело, КодировкаТекста.ANSI);
    ЗаписьДанных.ЗаписатьСтроку("--" + Boundary);
    ЗаписьДанных.Записать(ПолучитьФайлВБинарномВиде(ИмяФайлаДляСервера, ТипДокумента, ПодтипДокумента, ДанныеФайла, Boundary, РасширениеФайлаДляСервера));
    ЗаписьДанных.ЗаписатьСтроку("--" + Boundary + "--");
    ЗаписьДанных.Закрыть();
    
    ДвоичныеДанныеТело = ПотокТело.ЗакрытьИПолучитьДвоичныеДанные();		

	Возврат ДвоичныеДанныеТело;	
	
КонецФункции

Функция ПолучитьФайлВБинарномВиде(ИмяФайла, ТипДокумента, ПодтипДокумента = Неопределено, ДвоичныеДанные, boundary, Расширение)
    
    Поток = Новый ПотокВПамяти();
    ЗаписьДанных = Новый ЗаписьДанных(Поток, КодировкаТекста.ANSI); //Новый ЗаписьДанных(<Поток>, <КодировкаТекста>, <ПорядокБайтов>, <РазделительСтрок>, <КонвертируемыйРазделительСтрок>, <ЗаписатьBOM>) 
    
    ЗаписьДанных.ЗаписатьСтроку("Content-Disposition: form-data; name=""file""; filename=""" + ИмяФайла + """");
    ЗаписьДанных.ЗаписатьСтроку("Content-Type: " + ПолучитьСоответствиеMimeType(Расширение));
    ЗаписьДанных.ЗаписатьСтроку("");

    ЗаписьДанных.Записать(ДвоичныеДанные);
	
	ЗаписьДанных.ЗаписатьСтроку("");
	ЗаписьДанных.ЗаписатьСтроку("");

	ЗаписьДанных.ЗаписатьСтроку("--" + boundary);
	ЗаписьДанных.ЗаписатьСтроку("Content-Disposition: form-data; name=""typeId""");
	ЗаписьДанных.ЗаписатьСтроку("");
	ЗаписьДанных.ЗаписатьСтроку(ТипДокумента);	
	
	Если ЗначениеЗаполнено(ПодтипДокумента) Тогда
		ЗаписьДанных.ЗаписатьСтроку("");
		ЗаписьДанных.ЗаписатьСтроку("--" + boundary);
		ЗаписьДанных.ЗаписатьСтроку("Content-Disposition: form-data; name=""subtypeId""");
		ЗаписьДанных.ЗаписатьСтроку("");
		ЗаписьДанных.ЗаписатьСтроку(ПодтипДокумента);	
	КонецЕслИ;
	
    ЗаписьДанных.Закрыть();
    
    Возврат Поток.ЗакрытьИПолучитьДвоичныеДанные();
    
КонецФункции

Функция ПолучитьПутьКФайлу(Файл)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Файл.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
		Возврат "";
	КонецЕсли;

	Том = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Файл, "Том");
	ПутьКФайлу = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Файл, "ПутьКФайлу");
	
	Возврат Том.ПолныйПутьWindows + Файл.ПутьКФайлу; 
	
КонецФункции

Функция Транслит(Знач Текст)

	Текст = СтрЗаменить(Текст, "а","a");
    Текст = СтрЗаменить(Текст, "б","b");
    Текст = СтрЗаменить(Текст, "в","v");
    Текст = СтрЗаменить(Текст, "г","g");
    Текст = СтрЗаменить(Текст, "д","d");
    Текст = СтрЗаменить(Текст, "е","e");
    Текст = СтрЗаменить(Текст, "ё","e");
    Текст = СтрЗаменить(Текст, "ж","zh");
    Текст = СтрЗаменить(Текст, "з","z");
    Текст = СтрЗаменить(Текст, "и","i");
    Текст = СтрЗаменить(Текст, "к","k");
    Текст = СтрЗаменить(Текст, "л","l");
    Текст = СтрЗаменить(Текст, "м","m");
    Текст = СтрЗаменить(Текст, "н","n");
    Текст = СтрЗаменить(Текст, "о","o");
    Текст = СтрЗаменить(Текст, "п","p");
    Текст = СтрЗаменить(Текст, "р","r");
    Текст = СтрЗаменить(Текст, "с","s");
    Текст = СтрЗаменить(Текст, "т","t");
    Текст = СтрЗаменить(Текст, "у","u");
    Текст = СтрЗаменить(Текст, "ф","f");
    Текст = СтрЗаменить(Текст, "х","h");
    Текст = СтрЗаменить(Текст, "ч","ch");
    Текст = СтрЗаменить(Текст, "ш","sh");
    Текст = СтрЗаменить(Текст, "щ","sch");
    Текст = СтрЗаменить(Текст, "ъ","");
    Текст = СтрЗаменить(Текст, "ь","'");
    Текст = СтрЗаменить(Текст, "э","e");
    Текст = СтрЗаменить(Текст, "ю","yu");
    Текст = СтрЗаменить(Текст, "й","i");
    Текст = СтрЗаменить(Текст, "ц","c");
    Текст = СтрЗаменить(Текст, "я","ya");
    Текст = СтрЗаменить(Текст, "ы","i");
    Текст = СтрЗаменить(Текст, "А","A");
    Текст = СтрЗаменить(Текст, "Б","B");
    Текст = СтрЗаменить(Текст, "В","V");
    Текст = СтрЗаменить(Текст, "Г","G");
    Текст = СтрЗаменить(Текст, "Д","D");
    Текст = СтрЗаменить(Текст, "Е","E");
    Текст = СтрЗаменить(Текст, "Ё","E");
    Текст = СтрЗаменить(Текст, "Ж","Zh");
    Текст = СтрЗаменить(Текст, "З","Z");
    Текст = СтрЗаменить(Текст, "И","I");
    Текст = СтрЗаменить(Текст, "К","K");
    Текст = СтрЗаменить(Текст, "Л","L");
    Текст = СтрЗаменить(Текст, "М","M");
    Текст = СтрЗаменить(Текст, "Н","N");
    Текст = СтрЗаменить(Текст, "О","O");
    Текст = СтрЗаменить(Текст, "П","P");
    Текст = СтрЗаменить(Текст, "Р","R");
    Текст = СтрЗаменить(Текст, "С","S");
    Текст = СтрЗаменить(Текст, "Т","T");
    Текст = СтрЗаменить(Текст, "У","U");
    Текст = СтрЗаменить(Текст, "Ф","F");
    Текст = СтрЗаменить(Текст, "Х","H");
    Текст = СтрЗаменить(Текст, "Ч","Ch");
    Текст = СтрЗаменить(Текст, "Ш","Sh");
    Текст = СтрЗаменить(Текст, "Щ","Sch");
    Текст = СтрЗаменить(Текст, "Ъ","");
    Текст = СтрЗаменить(Текст, "Ь","");
    Текст = СтрЗаменить(Текст, "Ы","I");
    Текст = СтрЗаменить(Текст, "Ц","C");
    Текст = СтрЗаменить(Текст, "Э","E");
    Текст = СтрЗаменить(Текст, "Ю","Yu");
    Текст = СтрЗаменить(Текст, "Я","Ya");
    Текст = СтрЗаменить(Текст, "Й","I"); 
    
    Возврат Текст;
	
КонецФункции

Функция ПолучитьСоответствиеMimeType(Расширение) Экспорт 
	
	СоответствиеТипов = Новый Соответствие;
	
	СоответствиеТипов.Вставить("png", "image/png");
	СоответствиеТипов.Вставить("tiff", "image/tiff");
	СоответствиеТипов.Вставить("jpg", "image/jpeg");
	СоответствиеТипов.Вставить("jpeg", "image/pjpeg");
	СоответствиеТипов.Вставить("pdf", "application/pdf");	
	СоответствиеТипов.Вставить("zip", "application/zip");
	СоответствиеТипов.Вставить("zip", "multipart/x-zip");
	СоответствиеТипов.Вставить("7z", "application/x-7z-compressed");
	СоответствиеТипов.Вставить("rar", "application/x-rar-compressed");	
	СоответствиеТипов.Вставить("exe", "application/octet-stream");
	СоответствиеТипов.Вставить("bin", "application/octet-stream");
	СоответствиеТипов.Вставить("com", "application/octet-stream");
	СоответствиеТипов.Вставить("psd", "application/octet-stream");
	СоответствиеТипов.Вставить("bmp", "image/bmp");
	СоответствиеТипов.Вставить("heif", "image/heif");
	СоответствиеТипов.Вставить("heic", "image/heic");
	СоответствиеТипов.Вставить("txt", "text/plain");
	//СоответствиеТипов.Вставить("doc", "application/msword");
	//СоответствиеТипов.Вставить("docx", "application/vnd.openxmlformats-officedocument.wordprocessingml.document");
	//СоответствиеТипов.Вставить("dotx", "application/vnd.openxmlformats-officedocument.wordprocessingml.template");
	
	MimeType = СоответствиеТипов.Получить(Расширение);
	Если MimeType = Неопределено Тогда
		MimeType = "application/x-octet-stream";
	КонецЕсли;
	
	Возврат MimeType;
	
КонецФункции

Функция ПолучитьСтатусИпотечнойАнкеты(КодСтатуса) Экспорт 

	Возврат Справочники.СтатусыИпотечныхАнкетДомКлик.НайтиПоКоду(КодСтатуса);
	
КонецФункции

Функция ПреобразоватьКДате(ДатаСтрокой) Экспорт
		
	ДатаРезультат = Дата(1, 1, 1);

	Если НЕ ЗначениеЗаполнено(ДатаСтрокой) Тогда
		Возврат ДатаРезультат;
	КонецЕсли;
		
	ЧастиДоТочки = СтрРазделить(ДатаСтрокой, ".");	
	СтрокаБезТочки = "";
	
	Если ЧастиДоТочки.Количество() > 1 Тогда
		СтрокаДоТочки = ЧастиДоТочки[0];
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(СтрокаДоТочки) Тогда
		СтрокаДоТочки = СтрЗаменить(СтрокаДоТочки , "T", "");
		СтрокаДоТочки = СтрЗаменить(СтрокаДоТочки , "-", "");
		СтрокаДоТочки = СтрЗаменить(СтрокаДоТочки , ":", "");

		ДатаРезультат = Дата(СтрокаДоТочки);
	КонецЕсли;
	
	Возврат ДатаРезультат;
	
КонецФункции

Функция СоздатьСтруктуруСделкиДляОтправки(ИпотечнаяЗаявка) 
	
	СтруктураСделки = Новый Структура();
	СтруктураСделки.Вставить("agentPhone", "");
	СтруктураСделки.Вставить("requestedSum", 0);
	СтруктураСделки.Вставить("sumSupposes", 0);
	СтруктураСделки.Вставить("loanPeriod", 0);
	СтруктураСделки.Вставить("officeId", 0);
	СтруктураСделки.Вставить("productId", 0);
	СтруктураСделки.Вставить("initialFee", 0);
	СтруктураСделки.Вставить("comment", "");
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИпотечнаяЗаявка.ИпотечныйАгент.phone КАК agentPhone,
	|	ИпотечнаяЗаявка.ПредполагаемаяСтоимостьОН КАК requestedSum,
	|	ИпотечнаяЗаявка.СуммаКредитаВРублях КАК sumSupposes,
	|	ИпотечнаяЗаявка.СрокКредита КАК loanPeriod,
	|	ИпотечнаяЗаявка.ОтделениеБанка.ID КАК officeId,
	|	ИпотечнаяЗаявка.ВидОбъектаНедвижимости.ID КАК productId,
	|	ИпотечнаяЗаявка.ПервоначальныйВзнос КАК initialFee,
	|	ИпотечнаяЗаявка.КомментарийКЗаявке КАК comment
	|ИЗ
	|	Документ.ИпотечнаяЗаявка КАК ИпотечнаяЗаявка
	|ГДЕ
	|	ИпотечнаяЗаявка.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ИпотечнаяЗаявка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();	
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(СтруктураСделки, ВыборкаДетальныеЗаписи);
		КонецЦикла;
	КонецЕсли;
	
	Возврат СтруктураСделки;
	
КонецФункции

Функция СоздатьСтруктуруСделкиДляОбновления(ИпотечнаяЗаявка) Экспорт
	
	СтруктураСделки = Новый Структура();
	СтруктураСделки.Вставить("approvedSum");	
	СтруктураСделки.Вставить("loanPeriod");
	СтруктураСделки.Вставить("requestedSum");	
	СтруктураСделки.Вставить("monthlyPayment");
	СтруктураСделки.Вставить("interestRate");
	СтруктураСделки.Вставить("overpaymentSum");
	СтруктураСделки.Вставить("requiredIncomeSum");
	СтруктураСделки.Вставить("sumSupposes");
	СтруктураСделки.Вставить("initialFee");
	СтруктураСделки.Вставить("AuthorID");
	СтруктураСделки.Вставить("dealStatusId");
	СтруктураСделки.Вставить("borrowerCasId");
	СтруктураСделки.Вставить("comment");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИпотечнаяЗаявка.sum_approved КАК approvedSum,
	|	ИпотечнаяЗаявка.СрокКредита КАК loanPeriod,
	|	ИпотечнаяЗаявка.ПредполагаемаяСтоимостьОН КАК requestedSum,
	|	ИпотечнаяЗаявка.ЕжемесячныйПлатеж КАК monthlyPayment,
	|	ИпотечнаяЗаявка.ПроцентнаяСтавка КАК interestRate,
	|	ИпотечнаяЗаявка.Переплата КАК overpaymentSum,
	|	ИпотечнаяЗаявка.НеобходимыйДоход КАК requiredIncomeSum,
	|	ИпотечнаяЗаявка.СуммаКредитаВРублях КАК sumSupposes,
	|	ИпотечнаяЗаявка.ПервоначальныйВзнос КАК initialFee,
	|	ИпотечнаяЗаявка.AuthorID КАК AuthorID,
	|	ИпотечнаяЗаявка.BorrowerCasID КАК borrowerCasId,
	|	ИпотечнаяЗаявка.СтатусЗаявки.ID КАК dealStatusId,
	|	ИпотечнаяЗаявка.КомментарийКЗаявке КАК comment		
	|ИЗ
	|	Документ.ИпотечнаяЗаявка КАК ИпотечнаяЗаявка
	|ГДЕ
	|	ИпотечнаяЗаявка.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ИпотечнаяЗаявка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();	
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(СтруктураСделки, ВыборкаДетальныеЗаписи);
		КонецЦикла;
	КонецЕсли;
	
	Возврат СтруктураСделки;
	
КонецФункции

Функция ПолучитьТокенДоступа(client_id, client_secret) 
			
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеАвторизацииДомКлик.access_token КАК access_token,
	|	ДанныеАвторизацииДомКлик.ГраницаДоступности КАК ГраницаДоступности
	|ИЗ
	|	РегистрСведений.ДанныеАвторизацииДомКлик КАК ДанныеАвторизацииДомКлик
	|ГДЕ
	|	ДанныеАвторизацииДомКлик.client_id = &client_id
	|	И ДанныеАвторизацииДомКлик.client_secret = &client_secret";
	
	Запрос.УстановитьПараметр("client_id", client_id);
	Запрос.УстановитьПараметр("client_secret", client_secret);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();	
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			Если ВыборкаДетальныеЗаписи.ГраницаДоступности >= ТекущаяДата() Тогда
				Возврат ВыборкаДетальныеЗаписи.access_token;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
	
КонецФункции

Функция ФорматироватьНомерДляОтправки(Номер)
	
	Результат = "";
	ДопустимыеСимволы = "1234567890";
	Для Позиция = 1 По СтрДлина(Номер) Цикл
		Символ = Сред(Номер,Позиция,1);
		Если СтрНайти(ДопустимыеСимволы, Символ) > 0 Тогда
			Результат = Результат + Символ;
		КонецЕсли;
	КонецЦикла;
	
	ПервыйСимвол = Лев(Результат, 1);
	НачальныеСимволы = Лев(Результат, 2);
	Если СтрДлина(Результат) = 11 И (ПервыйСимвол = "8" ИЛИ ПервыйСимвол = "7") Тогда
		Результат = Сред(Результат, 2);
	ИначеЕсли СтрДлина(Результат) = 12 И (НачальныеСимволы = "+7" ИЛИ НачальныеСимволы = "+8") Тогда 
		Результат = Сред(Результат, 3);		
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьКонтактныеДанныеКлиента(Клиент)
	
	СтруктураПараметров = Новый Структура("АдресФактическогоПроживания, СерияНомерПаспорта, НомерТелефона, EmailКлиента");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КлиентыКонтактнаяИнформация.Представление КАК Представление,
		|	"""" КАК Серия,
		|	"""" КАК Номер,
		|	1 КАК Ключ
		|ИЗ
		|	Справочник.Клиенты.КонтактнаяИнформация КАК КлиентыКонтактнаяИнформация
		|ГДЕ
		|	КлиентыКонтактнаяИнформация.Ссылка = &ФизЛицо
		|	И КлиентыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
		|	И КлиентыКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресМестаПроживанияКлиента)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	"""",
		|	ДокументыФизическихЛицСрезПоследних.Серия,
		|	ДокументыФизическихЛицСрезПоследних.Номер,
		|	2
		|ИЗ
		|	РегистрСведений.ДокументыФизическихЛиц.СрезПоследних(
		|			&Период,
		|			ФизЛицо = &ФизЛицо
		|				И ВидДокумента = ЗНАЧЕНИЕ(Справочник.ВидыДокументовФизическихЛиц.ПаспортРФ)) КАК ДокументыФизическихЛицСрезПоследних
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КлиентыКонтактнаяИнформация.Представление,
		|	"""",
		|	"""",
		|	3
		|ИЗ
		|	Справочник.Клиенты.КонтактнаяИнформация КАК КлиентыКонтактнаяИнформация
		|ГДЕ
		|	КлиентыКонтактнаяИнформация.Ссылка = &ФизЛицо
		|	И КлиентыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
		|	И КлиентыКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ОсновнойТелефонКлиента)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КлиентыКонтактнаяИнформация.Представление,
		|	"""",
		|	"""",
		|	4
		|ИЗ
		|	Справочник.Клиенты.КонтактнаяИнформация КАК КлиентыКонтактнаяИнформация
		|ГДЕ
		|	КлиентыКонтактнаяИнформация.Ссылка = &ФизЛицо
		|	И КлиентыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
		|	И КлиентыКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailКлиента)";
	
	Запрос.УстановитьПараметр("Период", ТекущаяДата());
	Запрос.УстановитьПараметр("ФизЛицо", Клиент);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		СтруктураПараметров.АдресФактическогоПроживания = "";
	Иначе
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Выборка.Ключ = 1 Тогда
				СтруктураПараметров.АдресФактическогоПроживания = Выборка.Представление;
			ИначеЕсли Выборка.Ключ = 2 Тогда
				СтруктураПараметров.СерияНомерПаспорта = СтрЗаменить(Выборка.Серия, " ", "") + СтрЗаменить(Выборка.Номер, " ", "");
			ИначеЕсли Выборка.Ключ = 3 Тогда
				СтруктураПараметров.НомерТелефона = Выборка.Представление;
			ИначеЕсли Выборка.Ключ = 4 Тогда
				СтруктураПараметров.EmailКлиента = Выборка.Представление;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат СтруктураПараметров;
	
КонецФункции

Функция НайтиВТаблицеПоЗначению(РезультатЗаполнения, ЭлементарныйВопрос, ВыгрузкаСтруктурыОтветов = Неопределено)
	
	Ответ = Неопределено;	
	Если ЗначениеЗаполнено(ЭлементарныйВопрос) Тогда
		НайденныеСтроки = РезультатЗаполнения.НайтиСтроки(Новый Структура("ЭлементарныйВопрос", ЭлементарныйВопрос));
		Если НайденныеСтроки.Количество() Тогда	
			Ответ = НайденныеСтроки[0].Ответ;
			Если ТипЗнч(Ответ) = Тип("СправочникСсылка.ВариантыОтветовАнкет") Тогда
				Если НЕ ВыгрузкаСтруктурыОтветов = Неопределено Тогда
					ОтветДомКлик = НайтиВТаблицеОтветов(ВыгрузкаСтруктурыОтветов, ЭлементарныйВопрос, Ответ); 
					Ответ = ?(ОтветДомКлик = Неопределено, СокрЛП(Ответ), ОтветДомКлик);
				Иначе
					Ответ = СокрЛП(Ответ);	
				КонецЕсли;
			ИначеЕсли ТипЗнч(Ответ) = Тип("Дата") Тогда
				Ответ = Формат(Ответ, "ДФ=yyyy-MM-dd");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

Функция НайтиВТаблицеОтветов(ВыгрузкаСтруктурыОтветов, ЭлементарныйВопрос, ОтветНаВопрос)

	Ответ = Неопределено;
	НайденныеСтроки = ВыгрузкаСтруктурыОтветов.НайтиСтроки(Новый Структура("ЭлементарныйВопрос, Ответ", ЭлементарныйВопрос, ОтветНаВопрос));
	Если НайденныеСтроки.Количество() Тогда	
		Ответ = НайденныеСтроки[0].ЗначениеПараметраДомКлик;
	КонецЕсли;	
	
	Возврат Ответ;
	
КонецФункции	

Функция ПолучитьСостояниеСделки_РешениеБанка(Статус_ID, ТолькоОтправкаПисем = Ложь) 
	
	СтруктураВозврат = Новый Структура();		
	Если Статус_ID = 8030 
		ИЛИ Статус_ID = 8010 Тогда
		СтруктураВозврат.Вставить("СостояниеЗаявки", ПредопределенноеЗначение("Перечисление.СостоянияИпотечныхЗаявок.Отказ"));
		СтруктураВозврат.Вставить("ДатаРешенияБанка", ТекущаяДата());
		СтруктураВозврат.Вставить("РешениеБанка", ?(Статус_ID = 8030, ПредопределенноеЗначение("Справочник.РешенияБанков.ОтказКлиентаОтРассмотрения"), ПредопределенноеЗначение("Справочник.РешенияБанков.ОтказБанка")));
	ИначеЕсли Статус_ID = 8110
		ИЛИ Статус_ID = 8050
		ИЛИ Статус_ID = 8320 Тогда		
		СтруктураВозврат.Вставить("СостояниеЗаявки", ПредопределенноеЗначение("Перечисление.СостоянияИпотечныхЗаявок.Одобрение"));
		СтруктураВозврат.Вставить("ДатаРешенияБанка", ТекущаяДата());		
		СтруктураВозврат.Вставить("РешениеБанка", ПредопределенноеЗначение("Справочник.РешенияБанков.ОдобрениеБанка"));
	ИначеЕсли ТолькоОтправкаПисем Тогда
		СтруктураВозврат.Вставить("СостояниеЗаявки", ПредопределенноеЗначение("Перечисление.СостоянияИпотечныхЗаявок.ОтправленаПоПочте"));	
	Иначе
		СтруктураВозврат.Вставить("СостояниеЗаявки", ПредопределенноеЗначение("Перечисление.СостоянияИпотечныхЗаявок.Отправка"));
		СтруктураВозврат.Вставить("ДатаРешенияБанка", Неопределено);
		СтруктураВозврат.Вставить("РешениеБанка", ПредопределенноеЗначение("Справочник.РешенияБанков.ПустаяСсылка"));
	КонецЕсли;
	
	Возврат СтруктураВозврат;
	
КонецФункции

Процедура ЗаполнитьИсториюСтатусов(МассивСтатусов, ИпотечнаяЗаявка, АктуальныйКомментарий = "", Модифицированность = Ложь)
		
	РегНаб = РегистрыСведений.ИсторияСтатусовИпотечныхЗаявок.СоздатьНаборЗаписей();
	РегНаб.Отбор.ИпотечнаяЗаявка.Установить(ИпотечнаяЗаявка);
	РегНаб.Прочитать();
	
	Для каждого Элемент Из МассивСтатусов Цикл
		Попытка				
			Date = УправлениеИпотечнымиЗаявкамиДомКлик.ПреобразоватьКДате(Элемент.createdTime);
			
			//Врем. соответствие
			СоответствиеСтатусовСобытий = Новый Соответствие();
			СоответствиеСтатусовСобытий.Вставить("CREDIT_SENT", "SENT_TO_BANK");
			СоответствиеСтатусовСобытий.Вставить("CREDIT_ACCEPTED", "TAKEN_COPP");
			СоответствиеСтатусовСобытий.Вставить("CREDIT_RETURNED", "RETURNED_FOR_REVISION");
			СоответствиеСтатусовСобытий.Вставить("CREDIT_ANALYZE", "LOAN_ANALYSIS");
			СоответствиеСтатусовСобытий.Вставить("CREDIT_APPROVED", "LOAN_APPROVED");
			СоответствиеСтатусовСобытий.Вставить("CREDIT_RESEND", "SENT_TO_BANK");
			
			Title = СоответствиеСтатусовСобытий.Получить(Элемент.type);
			
			Status = Справочники.СтатусыИпотечныхЗаявок.НайтиПоРеквизиту("Title", Title);					
			Если НЕ ЗаписьЕстьВНаборе(РегНаб, Date, Status) Тогда		
				НовЗапись = РегНаб.Добавить();
				НовЗапись.ИпотечнаяЗаявка = ИпотечнаяЗаявка;
				НовЗапись.Date = Date;
				НовЗапись.Status = Status;
				НовЗапись.Comment = Элемент.Comment;
				
				АктуальныйКомментарий = Элемент.Comment;
				Модифицированность = Истина;
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЦикла;			
	
	ТЗ_История = РегНаб.Выгрузить();
	Если ТЗ_История.Количество() Тогда
		ТЗ_История.Сортировать("Date Desc");
		Если НЕ АктуальныйКомментарий = ТЗ_История[0].Comment Тогда
			АктуальныйКомментарий = ТЗ_История[0].Comment;
		КонецЕсли;
	КонецЕсли;	
		
	Если РегНаб.Модифицированность() Тогда //НЕ РегНаб.Выбран()
		РегНаб.Записать(Истина);
	КонецЕсли;
	
КонецПроцедуры

Функция ЗаписьЕстьВНаборе(Набор, Date, Status)
	
	Для каждого Запись Из Набор Цикл	
		Если Status = Запись.Status И Date = Запись.Date Тогда
			Возврат Истина;	
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Процедура СоздатьЗаписьЛога(ИпотечнаяЗаявка, Ошибки = "")
	
	Попытка
		МенеджерЗаписи = РегистрыСведений.ЛогПолучениеДанныхЗаявокНаКредит.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Дата = ТекущаяДата();
		МенеджерЗаписи.Ошибки = Ошибки;
		МенеджерЗаписи.ИпотечнаяЗаявка = ИпотечнаяЗаявка;
		//МенеджерЗаписи.Пользователь = ПараметрыСеанса.ТекущийПользователь;
		МенеджерЗаписи.Записать();
	Исключение
	КонецПопытки;	
	
КонецПроцедуры

#КонецОбласти

#Область Анкета

Функция СоздатьСтруктуруАнкеты(ПараметрыAPI, АнкетаСсылка, ТипАнкеты) Экспорт
	
	СтруктураАнкеты = Неопределено;
	ЗапрашиватьСтуктуруАдресаDaData = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыAPI, "НормализацияАдресаDaData");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Маппинг_ВопросыАнкетыДомКлик.ЭлементарныйВопрос КАК ЭлементарныйВопрос,
	|	Маппинг_ВопросыАнкетыДомКлик.ПараметрДомКлик КАК ПараметрДомКлик,
	|	Маппинг_ВопросыАнкетыДомКлик.Обязательный КАК Обязательный,
	|	Маппинг_ВопросыАнкетыДомКлик.ЭтоКоллекция КАК ЭтоКоллекция
	|ИЗ
	|	РегистрСведений.Маппинг_ВопросыАнкетыДомКлик КАК Маппинг_ВопросыАнкетыДомКлик";
	
	РезультатЗапроса = Запрос.Выполнить();	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат СтруктураАнкеты;
	Конецесли;
			
	ВыгрузкаСтруктурыВопросов = РезультатЗапроса.Выгрузить();
	ВопросыАнкетирования = ВыгрузкаСтруктурыВопросов.ВыгрузитьКолонку("ЭлементарныйВопрос");
		
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Маппинг_ОтветыАнкетыДомКлик.ЭлементарныйВопрос КАК ЭлементарныйВопрос,
	|	Маппинг_ОтветыАнкетыДомКлик.Ответ КАК Ответ,
	|	Маппинг_ОтветыАнкетыДомКлик.ЗначениеПараметраДомКлик КАК ЗначениеПараметраДомКлик
	|ИЗ
	|	РегистрСведений.Маппинг_ОтветыАнкетыДомКлик КАК Маппинг_ОтветыАнкетыДомКлик";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыгрузкаСтруктурыОтветов = РезультатЗапроса.Выгрузить();
	Конецесли;
			
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Маппинг_АдресРегистрацииДомКлик.ЭлементарныйВопрос КАК ЭлементарныйВопрос,
	|	Маппинг_АдресРегистрацииДомКлик.ПараметрДомКлик КАК ПараметрДомКлик,
	|	Маппинг_АдресРегистрацииДомКлик.ПозицияВСтрокеСлияния КАК ПозицияВСтрокеСлияния,
	|	Маппинг_АдресРегистрацииДомКлик.РазделительСтрокиСлияния КАК РазделительСтрокиСлияния,
	|	Маппинг_АдресРегистрацииДомКлик.ЗначениеПоУмолчанию КАК ЗначениеПоУмолчанию
	|ИЗ
	|	РегистрСведений.Маппинг_АдресРегистрацииДомКлик КАК Маппинг_АдресРегистрацииДомКлик
	|
	|УПОРЯДОЧИТЬ ПО
	|	Маппинг_АдресРегистрацииДомКлик.ПорядокСортировки,
	|	ПараметрДомКлик,
	|	ПозицияВСтрокеСлияния
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Маппинг_ФактическийАдресДомКлик.ЭлементарныйВопрос КАК ЭлементарныйВопрос,
	|	Маппинг_ФактическийАдресДомКлик.ПараметрДомКлик КАК ПараметрДомКлик,
	|	Маппинг_ФактическийАдресДомКлик.ПозицияВСтрокеСлияния КАК ПозицияВСтрокеСлияния,
	|	Маппинг_ФактическийАдресДомКлик.РазделительСтрокиСлияния КАК РазделительСтрокиСлияния,
	|	Маппинг_ФактическийАдресДомКлик.ЗначениеПоУмолчанию КАК ЗначениеПоУмолчанию
	|ИЗ
	|	РегистрСведений.Маппинг_ФактическийАдресДомКлик КАК Маппинг_ФактическийАдресДомКлик
	|
	|УПОРЯДОЧИТЬ ПО
	|	Маппинг_ФактическийАдресДомКлик.ПорядокСортировки,
	|	ПараметрДомКлик,
	|	ПозицияВСтрокеСлияния";
	
	РезультатПакет = Запрос.ВыполнитьПакет();
	
	Если РезультатПакет.Количество() Тогда
		РезультатЗапроса = РезультатПакет[0];
		ВыгрузкаСтруктурыВопросов_АдресРегистрации = РезультатЗапроса.Выгрузить();
		ВопросыАнкетирования_Адреса = ВыгрузкаСтруктурыВопросов_АдресРегистрации.ВыгрузитьКолонку("ЭлементарныйВопрос");	
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВопросыАнкетирования, ВопросыАнкетирования_Адреса, Истина);
		
		РезультатЗапроса = РезультатПакет[1];
		ВыгрузкаСтруктурыВопросов_ФактическийАдрес = РезультатЗапроса.Выгрузить();
		ВопросыАнкетирования_Адреса = ВыгрузкаСтруктурыВопросов_ФактическийАдрес.ВыгрузитьКолонку("ЭлементарныйВопрос");	
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВопросыАнкетирования, ВопросыАнкетирования_Адреса, Истина);		
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОтветыНаВопросыАнкет.Ответ,
	|	ОтветыНаВопросыАнкет.ЭлементарныйВопрос,
	|	ОтветыНаВопросыАнкет.ЭлементарныйВопрос.Код КАК Код
	|ИЗ
	|	РегистрСведений.ОтветыНаВопросыАнкет КАК ОтветыНаВопросыАнкет
	|ГДЕ
	|	ОтветыНаВопросыАнкет.Регистратор = &Регистратор
	|	И ОтветыНаВопросыАнкет.ЭлементарныйВопрос В(&ЭлементарныйВопрос)";
	
	Запрос.УстановитьПараметр("Регистратор", АнкетаСсылка);
	Запрос.УстановитьПараметр("ЭлементарныйВопрос", ВопросыАнкетирования);

	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда		
		РезультатЗаполнения = РезультатЗапроса.Выгрузить();
		СтруктураАнкеты = ПолучитьСтруктуруАнкеты(ПараметрыAPI, РезультатЗаполнения, ВыгрузкаСтруктурыВопросов, ВыгрузкаСтруктурыОтветов, ЗапрашиватьСтуктуруАдресаDaData, ВыгрузкаСтруктурыВопросов_АдресРегистрации, ВыгрузкаСтруктурыВопросов_ФактическийАдрес);
		
		КонтактноеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(АнкетаСсылка, "КонтактноеЛицо");
		СтруктураПараметров = ПолучитьКонтактныеДанныеКлиента(КонтактноеЛицо);	
		СтруктураАнкеты.Вставить("fullName", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КонтактноеЛицо, "Наименование"));
		НомерТелефонаКлиента = СтруктураПараметров.НомерТелефона;
		СтруктураАнкеты.Вставить("contactPhoneMobile", ФорматироватьНомерДляОтправки(НомерТелефонаКлиента));
		EmailКлиента = СтруктураПараметров.EmailКлиента;
		Если ЗначениеЗаполнено(EmailКлиента) Тогда
			СтруктураАнкеты.Вставить("contactMail", EmailКлиента);
		КонецЕсли;
		СтруктураАнкеты.Вставить("applicationType", ?(ТипАнкеты = Справочники.ТипыАнкетДомКлик.Заемщик, "BORROWER", "COBORROWER"));
	КонецЕсли;
	
	Возврат СтруктураАнкеты;
	
КонецФункции	
	
Функция ПолучитьСтруктуруАнкеты(ПараметрыAPI, РезультатЗаполнения, ВыгрузкаСтруктурыВопросов, ВыгрузкаСтруктурыОтветов = Неопределено, ЗапрашиватьСтуктуруАдресаDaData = Ложь, ВыгрузкаСтруктурыВопросов_АдресРегистрации = Неопределено, ВыгрузкаСтруктурыВопросов_ФактическийАдрес = Неопределено)
	
	СтруктураАнкеты = Новый Структура;
	Для каждого Элемент Из ВыгрузкаСтруктурыВопросов Цикл
		ЗначениеПараметра = НайтиВТаблицеПоЗначению(РезультатЗаполнения, Элемент.ЭлементарныйВопрос, ВыгрузкаСтруктурыОтветов);		
		НайденноеЗначениеПараметра = Неопределено;
		СтруктураАнкеты.Свойство(Элемент.ПараметрДомКлик, НайденноеЗначениеПараметра);
		Если НЕ НайденноеЗначениеПараметра = Неопределено Тогда
			ЗначениеПараметра = СтрЗаменить(НайденноеЗначениеПараметра, " ", "") + СтрЗаменить(ЗначениеПараметра , " ", "");	
		КонецЕсли;				
		Если Элемент.ЭтоКоллекция Тогда
			МассивПараметров = Новый Массив;
			Если ЗначениеЗаполнено(ЗначениеПараметра) Тогда
				МассивПараметров.Добавить(ЗначениеПараметра);
			КонецЕсли;
			СтруктураАнкеты.Вставить(Элемент.ПараметрДомКлик, МассивПараметров);	
		Иначе
			СтруктураАнкеты.Вставить(Элемент.ПараметрДомКлик, ЗначениеПараметра);
		КонецЕсли;
	КонецЦикла;
	
	Если ЗапрашиватьСтуктуруАдресаDaData Тогда		
		ИспользоватьAPIСтандартизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыAPI, "ИспользоватьAPIСтандартизации");		
		Если НЕ ВыгрузкаСтруктурыВопросов_АдресРегистрации = Неопределено Тогда
			АдресРегистрации = ПолучитьТекстовоеПредставлениеАдреса(РезультатЗаполнения, ВыгрузкаСтруктурыВопросов_АдресРегистрации);
			СтруктураАдреса = ?(ИспользоватьAPIСтандартизации, НормализоватьАдресDaData(ПараметрыAPI, АдресРегистрации, "АдресРегистрацииДомКлик"), ПодсказкаАдресаDaData(ПараметрыAPI, АдресРегистрации, "АдресРегистрацииДомКлик"));
			СтруктураАнкеты.Вставить("registrationAddress", СтруктураАдреса);
		Иначе 
			СтруктураАнкеты.Вставить("registrationAddress", ПолучитьПустуюСтруктуруАдресаПоШаблону());
		КонецЕсли;			
		Если НЕ ВыгрузкаСтруктурыВопросов_ФактическийАдрес = Неопределено Тогда
			ФактическийАдрес = ПолучитьТекстовоеПредставлениеАдреса(РезультатЗаполнения, ВыгрузкаСтруктурыВопросов_ФактическийАдрес);
			СтруктураАдреса = ?(ИспользоватьAPIСтандартизации, НормализоватьАдресDaData(ПараметрыAPI, АдресРегистрации, "ФактическийАдресДомКлик"), ПодсказкаАдресаDaData(ПараметрыAPI, АдресРегистрации, "ФактическийАдресДомКлик"));
			СтруктураАнкеты.Вставить("actualAddress", СтруктураАдреса);			
		Иначе
			СтруктураАнкеты.Вставить("actualAddress", ПолучитьПустуюСтруктуруАдресаПоШаблону());	
		КонецЕсли;	
	Иначе
		Если НЕ ВыгрузкаСтруктурыВопросов_АдресРегистрации = Неопределено Тогда
			СтруктураАнкеты.Вставить("registrationAddress", ПолучитьСтруктуруАдреса(РезультатЗаполнения, ВыгрузкаСтруктурыВопросов_АдресРегистрации));
		Иначе
			СтруктураАнкеты.Вставить("registrationAddress", ПолучитьПустуюСтруктуруАдресаПоШаблону());
		КонецЕсли;
		Если НЕ ВыгрузкаСтруктурыВопросов_ФактическийАдрес = Неопределено Тогда
			СтруктураАнкеты.Вставить("actualAddress", ПолучитьСтруктуруАдреса(РезультатЗаполнения, ВыгрузкаСтруктурыВопросов_ФактическийАдрес));
		Иначе
			СтруктураАнкеты.Вставить("actualAddress", ПолучитьПустуюСтруктуруАдресаПоШаблону());				
		КонецЕсли;				
	КонецЕсли;
	
	Возврат СтруктураАнкеты;
	
КонецФункции

Функция ПолучитьТекстовоеПредставлениеАдреса(РезультатЗаполнения, ВыгрузкаСтруктурыВопросов) Экспорт
	
	ТекстовоеПредставлениеАдресаРегистрации = "";
	
	ТекущийПараметр = Неопределено;
	Для каждого Элемент Из ВыгрузкаСтруктурыВопросов Цикл				
		Если НЕ ЗначениеЗаполнено(Элемент.ЭлементарныйВопрос) Тогда
			Продолжить;
		КонецЕсли;		
		Если ТекущийПараметр = Элемент.ПараметрДомКлик Тогда
			Продолжить;		
		КонецЕсли;		
		ТекущийПараметр = Элемент.ПараметрДомКлик;		
		НайденныеСтроки = ВыгрузкаСтруктурыВопросов.НайтиСтроки(Новый Структура("ПараметрДомКлик", Элемент.ПараметрДомКлик));		
		Если НайденныеСтроки.Количество() > 1 Тогда
			ЗначениеПараметраСтрокой = "";
			Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				ЗначениеПараметра = НайтиВТаблицеПоЗначению(РезультатЗаполнения, Элемент.ЭлементарныйВопрос);
				ЗначениеПараметра = ?(ТипЗнч(ЗначениеПараметра) = Тип("Число"), СтрЗаменить(ЗначениеПараметра, Символы.НПП, ""), ЗначениеПараметра);
				Если НЕ ЗначениеЗаполнено(ЗначениеПараметра) Тогда
					Продолжить;
				КонецЕсли;
				ЗначениеПараметраСтрокой = ?(ЗначениеЗаполнено(ЗначениеПараметраСтрокой), ЗначениеПараметраСтрокой + ТекущийПараметр.РазделительСтрок + ЗначениеПараметра, ЗначениеПараметра);
			КонецЦикла;
			Если ЗначениеЗаполнено(ЗначениеПараметраСтрокой) Тогда
				ТекстовоеПредставлениеАдресаРегистрации = ?(ЗначениеЗаполнено(ТекстовоеПредставлениеАдресаРегистрации), ТекстовоеПредставлениеАдресаРегистрации + ", " + ЗначениеПараметраСтрокой, ЗначениеПараметраСтрокой);
			КонецЕсли; 									
		Иначе
			ЗначениеПараметра = НайтиВТаблицеПоЗначению(РезультатЗаполнения, Элемент.ЭлементарныйВопрос);
			ЗначениеПараметра = ?(ТипЗнч(ЗначениеПараметра) = Тип("Число"), СтрЗаменить(ЗначениеПараметра, Символы.НПП, ""), ЗначениеПараметра);
			Если ЗначениеЗаполнено(ЗначениеПараметра) Тогда
				ТекстовоеПредставлениеАдресаРегистрации = ?(ЗначениеЗаполнено(ТекстовоеПредставлениеАдресаРегистрации), ТекстовоеПредставлениеАдресаРегистрации + ", " + ЗначениеПараметра, ЗначениеПараметра);
			КонецЕсли; 						
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТекстовоеПредставлениеАдресаРегистрации;
	
КонецФункции	

Функция ПолучитьСтруктуруАдреса(РезультатЗаполнения, ВыгрузкаСтруктурыПолейАдреса) Экспорт
	
	СтруктураАдресаРегистрации = Новый Структура();
	
	ТекущийПараметр = Неопределено;
	Для каждого Элемент Из ВыгрузкаСтруктурыПолейАдреса Цикл		
		Если НЕ ЗначениеЗаполнено(Элемент.ПараметрДомКлик) Тогда
			Продолжить;
		КонецЕсли;				
		Если ТекущийПараметр = Элемент.ПараметрДомКлик Тогда
			Продолжить;		
		КонецЕсли;		
		ТекущийПараметр = Элемент.ПараметрДомКлик;
		ЗначениеПараметра = "";
		НайденныеСтроки = ВыгрузкаСтруктурыПолейАдреса.НайтиСтроки(Новый Структура("ПараметрДомКлик", Элемент.ПараметрДомКлик));		
		Если НайденныеСтроки.Количество() > 1 Тогда
			ЗначениеПараметраСтрокой = "";
			Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				ЗначениеПараметра = ?(НЕ ЗначениеЗаполнено(Элемент.ЭлементарныйВопрос), Неопределено, НайтиВТаблицеПоЗначению(РезультатЗаполнения, Элемент.ЭлементарныйВопрос));
				Если НЕ ЗначениеЗаполнено(ЗначениеПараметра) Тогда
					Продолжить;
				КонецЕсли;
				ЗначениеПараметраСтрокой = ?(ЗначениеЗаполнено(ЗначениеПараметраСтрокой), ЗначениеПараметраСтрокой + Элемент.РазделительСтрокиСлияния + ЗначениеПараметра, ЗначениеПараметра);
			КонецЦикла;
 			Если ЗначениеЗаполнено(ЗначениеПараметраСтрокой) Тогда
				ЗначениеПараметра = ЗначениеПараметраСтрокой;
			КонецЕсли; 									
		Иначе
			ЗначениеПараметра = ?(НЕ ЗначениеЗаполнено(Элемент.ЭлементарныйВопрос), Неопределено, НайтиВТаблицеПоЗначению(РезультатЗаполнения, Элемент.ЭлементарныйВопрос));						
		КонецЕсли;		
		СтруктураАдресаРегистрации.Вставить(Элемент.ПараметрДомКлик, ?(НЕ ЗначениеПараметра = Неопределено, ЗначениеПараметра, Элемент.ЗначениеПоУмолчанию));		
	КонецЦикла;
	
	Возврат СтруктураАдресаРегистрации;
	
КонецФункции

#КонецОбласти

#Область DaData

Функция НормализоватьАдресDaData(ПараметрыAPI, Адрес, ТипАдреса = "АдресРегистрацииДомКлик", Ошибки = "") Экспорт
		
	СтруктураАдреса = Неопределено;
	
	ПараметрыПодключения = ПолучитьПараметрыПодключения(ПараметрыAPI, , , Истина);
	
	Ошибки = "";
	КлючиДоступа = ПолучитьКлючиДоступаDaData(ПараметрыAPI);

	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type" , "application/json");
	ЗаголовокHTTP.Вставить("Authorization", "Token " + КлючиДоступа.DaData_APIКлюч);
	ЗаголовокHTTP.Вставить("X-Secret", КлючиДоступа.DaData_СекретныйКлюч);
		
	HTTPМетод = "POST";
	Сервер = "dadata.ru";
	Порт = 443;
	АдресРесурса = "/api/v2/clean/address";
	ТелоЗапроса = "[""" + Адрес + """]";
	Прокси = ПараметрыПодключения.Прокси;
	
	ПараметрыЗапроса = ПолучитьПараметрыЗапроса(HTTPМетод, Сервер, АдресРесурса, ТелоЗапроса, Прокси, Порт);
	
	ОтветСервера = ВыполнитьHTTPЗапрос(ПараметрыЗапроса, ЗаголовокHTTP);		
	Если НЕ ОтветСервера = Неопределено Тогда
		Если ТипЗнч(ОтветСервера) = Тип("Структура") И ОтветСервера.Свойство("error") Тогда
			Ошибки = ОтветСервера.error;	
		ИначеЕсли ТипЗнч(ОтветСервера) = Тип("Массив") И ОтветСервера.Количество() Тогда	
			СтруктураАдреса = ПолучитьПустуюСтруктуруАдресаПоВопросам(ТипАдреса);
			ЗаполнитьЗначенияСвойств(СтруктураАдреса, ОтветСервера[0]);	
		КонецЕсли;
	Иначе
		Ошибки = Ошибки + Символы.ПС + "Не удалось получить результат запроса";		
	КонецЕсли;
	
	Возврат СтруктураАдреса; 
	
КонецФункции

Функция ПодсказкаАдресаDaData(ПараметрыAPI, Адрес, ТипАдреса = "АдресРегистрацииДомКлик", Ошибки = "") Экспорт
		
	СтруктураАдреса = Неопределено;
	
	ПараметрыПодключения = ПолучитьПараметрыПодключения(ПараметрыAPI, , , Истина);
	
	Ошибки = "";
	КлючиДоступа = ПолучитьКлючиДоступаDaData(ПараметрыAPI);

	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type" , "application/json");
	ЗаголовокHTTP.Вставить("Authorization", "Token " + КлючиДоступа.DaData_APIКлюч);
		
	HTTPМетод = "POST";
	Сервер = "suggestions.dadata.ru";
	Порт = Неопределено;
	АдресРесурса = "suggestions/api/4_1/rs/suggest/address";	
	ТелоЗапроса = Новый Структура("query, count", Адрес, 1);
	
	Прокси = ПараметрыПодключения.Прокси;
	
	ПараметрыЗапроса = ПолучитьПараметрыЗапроса(HTTPМетод, Сервер, АдресРесурса, ТелоЗапроса, Прокси, Порт);
	
	ОтветСервера = ВыполнитьHTTPЗапрос(ПараметрыЗапроса, ЗаголовокHTTP);		
	Если НЕ ОтветСервера = Неопределено Тогда
		Если ТипЗнч(ОтветСервера) = Тип("Структура") И ОтветСервера.Свойство("error") Тогда
			Ошибки = ОтветСервера.error;	
		ИначеЕсли ОтветСервера.Свойство("suggestions") И ТипЗнч(ОтветСервера.suggestions) = Тип("Массив") И ОтветСервера.suggestions.Количество() Тогда	
			СтруктураАдреса = ПолучитьПустуюСтруктуруАдресаПоВопросам(ТипАдреса);
			ЗаполнитьЗначенияСвойств(СтруктураАдреса, ОтветСервера.suggestions[0].data);	
		КонецЕсли;
	Иначе
		Ошибки = Ошибки + Символы.ПС + "Не удалось получить результат запроса";		
	КонецЕсли;
	
	Возврат СтруктураАдреса; 
	
КонецФункции

Функция ПолучитьПустуюСтруктуруАдресаПоВопросам(ТипАдреса = "АдресРегистрацииДомКлик", ДобавлятьНеобязательныеПоля = Истина)

	СтруктураАдреса = Новый Структура();

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Маппинг.ПараметрДомКлик КАК ПараметрДомКлик,
	|	Маппинг.Обязательный КАК Обязательный
	|ИЗ
	|	РегистрСведений.Маппинг_" + ТипАдреса + " КАК Маппинг";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();	
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Если ДобавлятьНеобязательныеПоля Тогда
				СтруктураАдреса.Вставить(ВыборкаДетальныеЗаписи.ПараметрДомКлик);		
			Иначе	
				Если ВыборкаДетальныеЗаписи.Обязательный Тогда
					СтруктураАдреса.Вставить(ВыборкаДетальныеЗаписи.ПараметрДомКлик);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат СтруктураАдреса;
	
КонецФункции

Функция ПолучитьПустуюСтруктуруАдресаПоШаблону(ДобавлятьНеобязательныеПоля = Ложь)
	
	СтруктураАдреса = Новый Структура();
	
	СтруктураАдреса.Вставить("postal_code");            
	СтруктураАдреса.Вставить("country");
	СтруктураАдреса.Вставить("region_type");
	СтруктураАдреса.Вставить("region");    
	СтруктураАдреса.Вставить("city_type");
	СтруктураАдреса.Вставить("city");
	СтруктураАдреса.Вставить("street_type");
	СтруктураАдреса.Вставить("street");
	СтруктураАдреса.Вставить("house_type");
	СтруктураАдреса.Вставить("house");	

	Если ДобавлятьНеобязательныеПоля Тогда		
		//СтруктураАдреса.Вставить("region_with_type");        
		//СтруктураАдреса.Вставить("city_with_type");
		//СтруктураАдреса.Вставить("settlement_with_type");     
		//СтруктураАдреса.Вставить("city_district_with_type");  
		//СтруктураАдреса.Вставить("street_with_type");    
		//СтруктураАдреса.Вставить("qc"); 
		
		СтруктураАдреса.Вставить("area_type");
		СтруктураАдреса.Вставить("area");		     
				
		СтруктураАдреса.Вставить("settlement_type");
		СтруктураАдреса.Вставить("settlement");		     
		
		СтруктураАдреса.Вставить("block_type");
		СтруктураАдреса.Вставить("block_type_full");
		СтруктураАдреса.Вставить("block");
	
		СтруктураАдреса.Вставить("flat");
		СтруктураАдреса.Вставить("flat_type");		                     	 
	КонецЕсли;
	
	Возврат СтруктураАдреса;
	
КонецФункции

Функция ПолучитьКлючиДоступаDaData(ПараметрыAPI) Экспорт
	
	DaData_APIКлюч = "";	
	DaData_СекретныйКлюч = "";
	
	УстановитьПривилегированныйРежим(Истина);
    Данные = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(ПараметрыAPI, "DaData");
	Если ТипЗнч(Данные) = Тип("Структура") И Данные.Свойство("DaData_APIКлюч") И Данные.Свойство("DaData_СекретныйКлюч") Тогда
		DaData_APIКлюч = Данные.DaData_APIКлюч;
		DaData_СекретныйКлюч = Данные.DaData_СекретныйКлюч;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
		
	Возврат Новый Структура("DaData_APIКлюч, DaData_СекретныйКлюч", DaData_APIКлюч, DaData_СекретныйКлюч);
		
КонецФункции

Процедура ЗаписатьКлючиДоступаDaData(ПараметрыAPI, client_id, client_secret) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Данные = Новый Структура("DaData_APIКлюч, DaData_СекретныйКлюч", client_id, client_secret);
    ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(ПараметрыAPI, Данные, "DaData");
    УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти
